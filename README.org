#+STARTUP: content
* .emacs.d

yewton の ~.emacs.d~ です。

[[./images/screenshot.png]]
** ヘッダー

tangle されたファイルに付与されるヘッダです。

#+BEGIN_SRC emacs-lisp :padline no
;;; -*- coding: utf-8; lexical-binding: t -*-
#+END_SRC

ここでは、 ~:padline no~ を付けないとファイルの先頭に空行が入ってしまいます。

** 基本的なセットアップ

設定に使用する定数を定義します:

#+BEGIN_SRC emacs-lisp
  (defconst my-personal-directory (expand-file-name "personal/" user-emacs-directory)
    "バージョン管理外の個人用設定ファイルを配置するためのディレクトリ.

  その他の設定が全て完了した時に読み込まれます.")
  (defconst my-personal-preload-directory (expand-file-name "preload/" my-personal-directory)
    "バージョン管理外の個人用設定ファイルを配置するためのディレクトリ.

  一番最初に読み込まれます.")
#+END_SRC

この他に ~my-data-directory~ という、バージョン管理外の様々なファイルを配置するためのディレクトリが
[[file:init.el][init.el]] で定義されています。

続いて、 ~my-personal-preload-directory~ 個人設定を読み込みます:

#+BEGIN_SRC emacs-lisp
  (mapc #'load (directory-files my-personal-preload-directory 't "^[^#].*el\\'"))
#+END_SRC

個人情報を設定します:

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Yuto SASAKI")
  (setq user-mail-address "yewton@gmail.com")
#+END_SRC

ロケール関係の環境変数を設定します。

これらは明示的に設定しない場合は環境変数から自動で設定されますが、
Mac OS X の Application として動かす場合はシェルの環境変数が引き継がれないため、すべて明示的に指定します:

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq locale-coding-system 'utf-8)
    (setq system-time-locale "ja_JP.UTF-8")
    (setenv "LANG" "ja_JP.UTF-8")
    (setenv "LC_ALL" "ja_JP.UTF-8")
    (setenv "LC_MESSAGES" "ja_JP.UTF-8"))
#+END_SRC

~el-get~ は大量の通信を行うため、結構な頻度で失敗します。
単にリトライすれば解決する場合も多いため、
失敗時に一定回数リトライするような関数を定義して使うことにします:

#+BEGIN_SRC emacs-lisp
  (require 'el-get)
  (defun my-el-get-sync (packages &optional num)
    "(el-get 'sync PACKAGES) 失敗時に NUM 回までリトライする"
    (let* ((num (or num 5))
           (trial (number-sequence 1 num)))
      (while trial
        (condition-case err-var
            (progn
              (el-get 'sync packages)
              (setq trial nil))
          (error
           (message "Trial %d: failed with: %s" (car trial) err-var)
           (setq trial (cdr trial))
           (if trial
               (sleep-for (car trial))
             (error "el-get failed with: %s" err-var)))))))
#+END_SRC

なお、el-get 自体のインストールは [[file:init.el][init.el]] で行っています。

続いて基本的なパッケージをインストール・設定しておきます:

#+BEGIN_SRC emacs-lisp
  (my-el-get-sync '(dash diminish f s use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (use-package f)
  (use-package dash
    :config
    (dash-enable-font-lock))
  (use-package s)
#+END_SRC

ディレクトリ関連の関数を定義します:

#+BEGIN_SRC emacs-lisp
  (defun my-directory! (name default-directory)
    "DEFAULT-DIRECTORY に NAME というディレクトリを作成し、その絶対パスを返します."
    (let ((path (file-name-as-directory (f-expand name default-directory))))
      (unless (file-directory-p path)
        (make-directory path t))
      path))

  (defun my-user-emacs-directory! (name)
    "`user-emacs-directory' に NAME というディレクトリを作成し、その絶対パスを返します."
    (my-directory! name user-emacs-directory))

  (defun my-data-directory! (name)
    "`my-data-directory' に NAME というディレクトリを作成し、その絶対パスを返します."
    (my-directory! name my-data-directory))

  (defun my-data-file (name)
    "`my-data-directory' 以下の NAME というファイル名の絶対パスを返します."
    (f-expand name my-data-directory))
#+END_SRC

一部のファイルやディレクトリの設定はパッケージのインストール前に設定しておかないと、
予期せぬディレクトリを作成してしまう場合があるため、ここで設定しておきます:

#+BEGIN_SRC emacs-lisp
  (setq url-configuration-directory (my-data-directory! "url")
        pcache-directory (my-data-directory! "pcache")
        ac-comphist-file (my-data-file "ac-comphist.dat"))
#+END_SRC

** 特定のパッケージに依存しない設定
*** ナビゲーション系

カーソルやバッファ、ウインドウなどの移動関連の設定です。

~dired~ で、もう片方のウインドウに表示された ~dired~ のディレクトリに対して
コピーなどの操作が行われるようにするなど、
~dired~ に対象ディレクトリを〈推測〉させます:

#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC

いちいち音を鳴らしたり画面を点滅させたりさせないようにします:

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore
        visible-bell nil)
#+END_SRC

リンクっぽい文字列をハイライトして、 ~C-c RET~ でリンクを開けるようにします:

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'goto-address-prog-mode)
#+END_SRC

同じようにバグや不具合に対する参照にリンクを設定します:

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'bug-reference-prog-mode)
#+END_SRC

~*Help*~ ウインドウにフォーカスを当てたままにします:

#+BEGIN_SRC emacs-lisp
(setq help-window-select t)
#+END_SRC

~*compilation*~ バッファを、最初のエラーまたは最後までスクロールさせます:

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC


行頭移動の挙動を改善します。

参考リンク: [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Smarter navigation to the beginning of a line - Emacs Redux]]

#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  #'smarter-move-beginning-of-line)
#+END_SRC

ファイルの再読み込みを行うヘルパー関数を定義します:

#+BEGIN_SRC emacs-lisp
  (defun my-revert-buffer (&optional force) (interactive "P") (revert-buffer t force))
  (bind-key* "C-c C-x j"  #'my-revert-buffer)
#+END_SRC

*** 編集系

編集作業に関連する設定を行います。

言語環境を設定します:

#+BEGIN_SRC emacs-lisp
  (set-language-environment 'Japanese)
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
#+END_SRC

外部の変更を自動的に反映するようにします:

#+BEGIN_SRC emacs-lisp
  (require 'autorevert)
  (global-auto-revert-mode 1)
#+END_SRC

~dired~ も自動反映させます。
また、自動反映時のメッセージを表示しないようにします:

#+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
#+END_SRC

~*scratch*~ バッファを ~text-mode~ で開くようにします。
デフォルトでは ~emacs-lisp-mode~ で開かれるため
emacs-lisp 用の設定がロードされてしまい、起動に時間がかかってしまうためです。

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'text-mode)
#+END_SRC

インデントにハードタブではなくスペースを使うようにします:

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+END_SRC

ファイル削除時にシステムのごみ箱を使うようにします:

#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC

自動折り返しする文字数を設定します:

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 120)
#+END_SRC

略称展開(abbrev)に関する設定をします:

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name (my-data-file "abbrev_defs")
        save-abbrevs t)
  (setq-default abbrev-mode t)
#+END_SRC

クリップボードの内容を kill-ring に保存するようにします:

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

Single space between sentences is more widespread than double:

#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC

coming  (command interpreter) に関する設定をします:

#+BEGIN_SRC emacs-lisp
(setq comint-process-echoes t)
#+END_SRC

Electric-Pair mode(自動で対応する閉じカッコを挿入してくれるモード)を有効にします:

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode +1)
#+END_SRC

~C-h~ をバックスペースキーにします。
また、それに伴って ~help-command~ のキー割り当てを変更しています:

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))
  (bind-key "C-c h" #'help-command)
#+END_SRC

~hippie-expand~ (様々な補完や展開を行なう)にキーを割り当てます:

#+BEGIN_SRC emacs-lisp
(bind-key*  "M-/" #'hippie-expand)
#+END_SRC

CUA(Common User Access style editing) mode から必要な関数だけキーを割り当てます。

矩形選択モードだけ使っています:

#+BEGIN_SRC emacs-lisp
  (bind-key "C-x SPC" #'cua-rectangle-mark-mode)
#+END_SRC

バックアップファイルを一箇所に保存するようにします:

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . ,(my-data-directory! "backup"))))
#+END_SRC

編集の競合を防ぐためのロックファイルを作成しないようにします:

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

式の評価時に省略せずに結果を出力するようにします:

#+BEGIN_SRC emacs-lisp
  (setq eval-expression-print-length nil
        eval-expression-print-level nil)
#+END_SRC

TRAMPのキャッシュファイルの場所を設定します:

#+BEGIN_SRC emacs-lisp
  (use-package tramp-cache
    :defer t
    :config (setq tramp-persistency-file-name (my-data-directory! "tramp")))
#+END_SRC

以下の関数は [[https://www.emacswiki.org/emacs/DisabledCommands][Disabled Commands]] の対象外にします:

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'erase-buffer 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

ファイルの最後に必ず改行を入れるようにします:

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

リージョン内でキー入力をしたときに、普通の選択範囲と同じように削除するようにします:

#+BEGIN_SRC emacs-lisp
(delete-selection-mode +1)
#+END_SRC

スクロールの挙動を調整します:

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC

マウスホイールによるスクロールの挙動を調整します:

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse t) ;; scroll window under mouse
#+END_SRC

現在いる関数名をモードラインに表示します:

#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'which-func))
  (which-function-mode 1)
  (setq which-func-unknown "")
#+END_SRC

キーストロークをすぐにエコーエリアに表示します:

#+BEGIN_SRC emacs-lisp
  (setq echo-keystrokes 0.2)
#+END_SRC

リージョンをハイライトします:

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t)
#+END_SRC

対応するカッコを強調表示します:

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

サーバーの設定をします:

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (defun server-remove-kill-buffer-hook ()
    (remove-hook 'kill-buffer-query-functions #'server-kill-buffer-query-function))
  (add-hook 'server-visit-hook #'server-remove-kill-buffer-hook)
  (when (and (>= emacs-major-version 23)
             (equal window-system 'w32))
    (defun server-ensure-safe-dir (dir) "Noop" t))
  (unless (server-running-p) (server-start))
#+END_SRC

**** Auto-save

自動保存ファイルを保存するディレクトリを宣言します:

#+BEGIN_SRC emacs-lisp
  (defconst my-auto-save-directory (my-data-directory! "auto-save"))
#+END_SRC

全てのファイルについて自動保存を有効にします:

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default t)
#+END_SRC

自動保存ファイルのプレフィクスを設定します:

#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix my-auto-save-directory)
#+END_SRC

TRAMP経由の自動保存ファイルの置き場所を設定します:

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(my-directory! "dist" my-auto-save-directory) t)))
#+END_SRC

ローカルの自動保存ファイルの置き場所を設定します:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-save-file-name-transforms
               `(".*" ,(my-directory! "site" my-auto-save-directory) t) 'append)
#+END_SRC

**** uniquify

バッファ名が被らないように、ファイル名に加えてディレクトリ名をバッファ名に付与するようにします。

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
#+END_SRC

=bar/mumble/name= のようにディレクトリ名を先頭に付与するスタイルを採用します:

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

セパレータを設定します:

#+BEGIN_SRC emacs-lisp
(setq uniquify-separator "/")
#+END_SRC

バッファを削除した際に再度 uniquify を行うようにします:

#+BEGIN_SRC emacs-lisp
(setq uniquify-after-kill-buffer-p t)
#+END_SRC

特殊なバッファは uniquify の対象外にします:

#+BEGIN_SRC emacs-lisp
(setq uniquify-ignore-buffers-re "^\\*")
#+END_SRC

**** キャメルケースへの対応

キャメルケースに関連する設定を行います。

まず、単語の区切りをキャメルケースを考慮して判定するように設定します。

参考リンク: [[http://smallsteps.seesaa.net/article/123661899.html][Emacsで単語単位の移動をキャメルケースの途中で区切るには: 小ネタ帳]] 

#+BEGIN_SRC emacs-lisp
  ;; 文字カテゴリの作成
  (unless (category-docstring ?V)
    (define-category ?V "Upper case"))
  (unless (category-docstring ?M)
      (define-category ?M "Lower case"))
  ;; 文字の登録。とりあえずはAからZまでの英字のみ。
  (modify-category-entry (cons ?A ?Z) ?V)
  (modify-category-entry (cons ?a ?z) ?M)
  ;; 小文字に大文字が続く場合を単語境界とする。
  (add-to-list 'word-separating-categories (cons ?M ?V))
#+END_SRC

次に、文字列をキャメルケースやスネークケース等に変換する関数を追加します。

参考リンク: [[http://tomykaira.hatenablog.com/entry/2012/01/09/152903][{emacs} CamelCase なんてもういらない - tomykaira makes love with codes]]

#+BEGIN_SRC emacs-lisp
  (defun camelize (s)
    "Convert under_score string S to CamelCase string."
    (mapconcat 'identity (mapcar
                          #'(lambda (word) (capitalize (downcase word)))
                          (split-string s "_")) ""))
  (defun camelize-previous-snake (&optional beg end)
    "Camelize the previous snake cased string .

  If transient-mark-mode is active and a region is activated,
  camelize the region."
    (interactive)
    (unless (and beg end)
      (if (and (boundp 'transient-mark-mode) transient-mark-mode mark-active)
          (setq beg (mark)
                end (point))
        (setq end (point)
              beg (+ (point) (skip-chars-backward "[:alnum:]_")))))
    (save-excursion
      (let ((c (camelize (buffer-substring-no-properties beg end))))
        (delete-region beg end)
        (goto-char (min beg end))
        (insert c))))
  (defun split-name (s)
    (split-string
     (let ((case-fold-search nil))
       (downcase
        (replace-regexp-in-string "\\([a-z]\\)\\([A-Z]\\)" "\\1 \\2" s)))
     "[^A-Za-z0-9]+"))
  (defun camelcase  (s) (mapconcat 'capitalize (split-name s) ""))
  (defun underscore (s) (mapconcat 'downcase   (split-name s) "_"))
  (defun dasherize  (s) (mapconcat 'downcase   (split-name s) "-"))
  (defun colonize   (s) (mapconcat 'capitalize (split-name s) "::"))
  (defun camelscore (s)
    (cond ((string-match-p "\:"  s) (camelcase s))
          ((string-match-p "-" s)   (colonize s))
          ((string-match-p "_" s)   (dasherize s))
          (t                        (underscore s))))
  (defun camelscore-word-at-point ()
    (interactive)
    (let* ((case-fold-search nil)
           (beg (and (skip-chars-backward "[:alnum:]:_-") (point)))
           (end (and (skip-chars-forward  "[:alnum:]:_-") (point)))
           (txt (buffer-substring beg end))
           (cml (camelscore txt)) )
      (if cml (progn (delete-region beg end) (insert cml))) ))
  (bind-key "\C-c \C-c" #'camelscore-word-at-point)
#+END_SRC

**** savehist

様々な入力履歴を永続化します。

#+BEGIN_SRC emacs-lisp
  (require 'savehist)
#+END_SRC

以下の変数を保存します:

#+BEGIN_SRC emacs-lisp
  (setq savehist-additional-variables '(
                                        bookmark-history
                                        command-history
                                        desktop-missing-file-warning
                                        extended-command-history
                                        file-name-history
                                        find-tag-history
                                        helm-build-regexp-history
                                        helm-eshell-command-on-file-input-history
                                        helm-external-command-history
                                        helm-ff-history
                                        helm-file-name-history
                                        helm-source-complex-command-history
                                        helm-source-file-name-history
                                        kill-ring
                                        minibuffer-history
                                        minibuffer-history-search-history
                                        minibuffer-text-before-history
                                        query-replace-history
                                        regexp-search-ring
                                        register-alist
                                        search-ring
                                        tags-file-name
                                        tags-table-list
                                        ))
#+END_SRC

自動保存間隔と保存先ファイルを設定し、 ~savehist-mode~ を有効にします:

#+BEGIN_SRC emacs-lisp
  (setq savehist-autosave-interval 60)
  (setq savehist-file (my-data-file ".savehist"))
  (savehist-mode +1)
#+END_SRC

**** recentf

〈最近開いたファイル〉の機能を有効にします。

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
#+END_SRC

保存先ファイルと最大保存数を設定します。
また、保存先ファイル自身を履歴に含めないようにします:

#+BEGIN_SRC emacs-lisp
  (setq recentf-save-file (my-data-file ".recentf")
        recentf-max-saved-items 1000
        recentf-exclude '(".recentf"))
#+END_SRC

リモートファイルの操作と相性が悪いため、自動整頓機能を無効にします:

#+BEGIN_SRC emacs-lisp
  (setq recentf-auto-cleanup 'never)
#+END_SRC

~recnetf-mode~ を有効にし、定期的に自動保存させます:

#+BEGIN_SRC emacs-lisp
  (recentf-mode +1)
  (run-with-idle-timer 300 t #'recentf-save-list)
#+END_SRC

*** ユーザーインタフェース系

見た目に関する設定をします。

新しいウインドウのサイズを適切に調整するようにします:

#+BEGIN_SRC emacs-lisp
  (setq window-combination-resize t)
#+END_SRC

フリンジ(縁)の設定をします:

#+BEGIN_SRC emacs-lisp
  (setq-default fringe-indicator-alist
                '((truncation . nil) (continuation . nil)))
#+END_SRC

行の何文字目にいるかをモードラインに表示するようにします:

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

行番号を表示するようにします:

#+BEGIN_SRC emacs-lisp
  (require 'linum)
  (setq linum-format "%4d")
  (add-hook 'prog-mode-hook #'linum-mode)
  (add-hook 'text-mode-hook #'linum-mode)
#+END_SRC

現在行をハイライト表示します:

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

カーソルを点滅させないようにします:

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

確認プロンプトを簡易化します:

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

アンダーラインに関する設定をします:

#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC

ミニバッファにおける入力時の挙動を改善します。

参考リンク : [[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][Emacs: Stop Cursor Going into Minibuffer Prompt]]

#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)) ; doesn't work in GNU Emacs 25.0.90.1.
#+END_SRC

不要なGUI部品を非表示にします:

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode) (tool-bar-mode 0))
  (when (fboundp 'menu-bar-mode) (menu-bar-mode 0))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
#+END_SRC

起動時に最大化するようにします:

#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook #'toggle-frame-maximized)
#+END_SRC

全角スペース タブ trailing-spacesを目立たせます:

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish
    ""
    (global-whitespace-mode . "")
    :config
    ;; space-markとtab-mark、それからspacesとtrailingを対象とする
    (setq whitespace-style '(space-mark tab-mark face spaces trailing)
          whitespace-display-mappings '(
                                        (space-mark ?\xA0 [?\u00A4] [?_]) ; hard space - currency
                                        (space-mark ?\x8A0 [?\x8A4] [?_]) ; hard space - currency
                                        (space-mark ?\x920 [?\x924] [?_]) ; hard space - currency
                                        (space-mark ?\xE20 [?\xE24] [?_]) ; hard space - currency
                                        (space-mark ?\xF20 [?\xF24] [?_]) ; hard space - currency
                                        (space-mark ?\u3000 [?\u3000] [?_ ?_]) ; full-width-space - square
                                        (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t]) ; tab - left quote mark
                                        )
          ;; whitespace-spaceの定義を全角スペースにし、色をつけて目立たせる
          whitespace-space-regexp "\\(\u3000+\\)")
    (set-face-foreground 'whitespace-space 'unspecified)
    (set-face-background 'whitespace-space "dim gray")
    ;; whitespace-trailingを色つきアンダーラインで目立たせる
    (set-face-underline 'whitespace-trailing t)
    (set-face-foreground 'whitespace-trailing "dim gray")
    (set-face-background 'whitespace-trailing 'unspecified)
    (global-whitespace-mode 1))
#+END_SRC

現在時刻の表示フォーマットを設定し、モードラインに表示します:

#+BEGIN_SRC emacs-lisp
  (setq display-time-format "%m月%d日(%a) %H:%M"
        display-time-default-load-average nil)
  (display-time-mode 1)
#+END_SRC

スタートアップの画面を表示しないようにします:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

ファイルのリスティング系の挙動を調整します:

#+BEGIN_SRC emacs-lisp
  (use-package ls-lisp
    :defer t
    :config
    (setq ls-lisp-dirs-first t
          ls-lisp-use-insert-directory-program nil
          ls-lisp-use-localized-time-format t))
#+END_SRC

** パッケージのインストール

el-get でインストールするパッケージを定義します:

#+BEGIN_SRC emacs-lisp
  (setq my-packages
        '(
          ace-isearch
          ace-link
          ag
          anzu
          apache-mode
          auto-complete
          beacon
          bm
          bookmark+
          buffer-move
          color-theme-zenburn
          crontab-mode
          ddskk
          diminish
          dired+
          dired-hacks
          dockerfile-mode
          easy-kill
          eldoc-eval
          elisp-slime-nav
          enh-ruby-mode
          ensime
          eyebrowse
          fancy-battery
          flycheck
          flycheck-pos-tip
          flyspell
          git-gutter
          git-gutter-fringe
          git-timemachine
          git-modes
          golden-ratio
          google-c-style
          helm
          helm-ag
          helm-c-yasnippet
          helm-descbinds
          helm-gtags
          helm-projectile
          helm-swoop
          htmlize
          hugo
          imenu-anywhere
          info+
          japanese-holidays
          js2-mode
          lispxmp
          magit
          magit-gh-pulls
          markdown-mode
          migemo
          multiple-cursors
          nginx-mode
          open-junk-file
          operate-on-number
          org-ac
          org-present
          org-reveal
          persp-mode
          plantuml-mode
          projectile
          quickrun
          rainbow-delimiters
          rainbow-identifiers
          rainbow-mode
          ruby-block
          ruby-electric
          ruby-end
          ruby-mode
          sbt-mode
          scala-mode2
          smartrep
          spaceline
          undo-tree
          volatile-highlights
          wakatime-mode
          web-mode
          wgrep
          which-key
          window-numbering
          yaml-mode
          yard-mode
          yasnippet
          ))
#+END_SRC

el-get の公式にないレシピや、一部自分用にカスタムしたものをここに列挙します:

#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package url-expand)
  (setq el-get-sources
        '((:name spaceline :type github :pkgname "TheBB/spaceline" :depends (powerline dash s))
          (:name persp-mode :type github :pkgname "Bad-ptr/persp-mode.el")
          (:name fancy-battery :type github :pkgname "lunaryorn/fancy-battery.el")
          (:name eyebrowse :type github :pkgname "wasamasa/eyebrowse")
          (:name org-reveal :depends nil)
          (:name powerline :pkgname "yewton/powerline" :branch "string-width")
          (:name hugo :type github :pkgname "yewton/hugo.el" :depends (dash f ht s))
          (:name easy-kill :type github :pkgname "leoliu/easy-kill")
          (:name markdown-mode :prepare nil) ; markdown-modeじゃなくgfm-modeで開きたいから
          (:name ensime :prepare nil) ; auto-load の定義が間違ってる気がする
          (:name ddskk :pkgname "skk-dev/ddskk" :autoloads nil :load-path "share/emacs/site-lisp/skk"
                 :info "share/info/skk.info" :features ("skk-setup")
                 :build
                 <<ddskk-build>>
                 )
          (:name open-junk-file
                 :features nil
                 :before (autoload 'open-junk-file "open-junk-file" "" t))))
#+END_SRC

DDSKK のビルドについては、実際の ~Makefile~ を出来るだけ忠実に再現出来るようにかなり頑張っています:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ddskk-build
  (let* ((prefix (el-get-package-directory "ddskk"))
         (dic-dir (expand-file-name "dic/" prefix))
         (tools-dir (expand-file-name "tools/" prefix))
         (info-dir (expand-file-name "share/info/" prefix))
         (base-url "http://openlab.ring.gr.jp/skk/skk/")
         (dic-base-url (url-expand-file-name "dic/" base-url))
         (tools-base-url (url-expand-file-name "tools/" base-url))
         (dic-name "SKK-JISYO.L")
         (dic-url (url-expand-file-name dic-name dic-base-url))
         (dic-path (expand-file-name dic-name dic-dir))
         (dic-makefile-url (url-expand-file-name "Makefile" dic-base-url))
         (dic-makefile-path (expand-file-name "Makefile" dic-dir))
         (skk2cdb "skk2cdb.py")
         (skk2cdb-url (url-expand-file-name skk2cdb tools-base-url))
         (skk2cdb-path (expand-file-name skk2cdb tools-dir))
         (emacs-options '("--batch" "--no-site-file" "--eval")))
    `(,@(mapcar (lambda (cmd) `(,el-get-emacs ,@emacs-options ,cmd))
                `(,@(mapcar (lambda (dir) (format "(make-directory \"%s\" t)" dir))
                            (list dic-dir info-dir tools-dir))
                  ,@(mapcar (lambda (p) (format "(url-copy-file \"%s\" \"%s\")" (car p) (cdr p)))
                            (list `(,dic-url . ,dic-path)
                                  `(,dic-makefile-url . ,dic-makefile-path)
                                  `(,skk2cdb-url . ,skk2cdb-path)))))
      (,el-get-emacs ,@emacs-options
                     ,(format "(setq PREFIX \"%s\")" prefix)
                     "-l" "SKK-MK" "-f" "SKK-MK-install")
      ("make" "-C" ,dic-dir "cdb")))
#+END_SRC

MELPA 等で配布されているパッケージをそのまま el-get から利用することもあるので、
標準のパッケージシステムも設定しておきます:

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("ELPA" . "http://tromey.com/elpa/")))
  (package-initialize)
#+END_SRC

Mac OS X の場合、ビルド時に正しいパスが設定されていないと失敗する場合があるため、
exec-path-from-shell でパスの設定を行ないます:

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (my-el-get-sync '(exec-path-from-shell))
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-initialize)))
#+END_SRC

その他のパッケージをインストールします:

#+BEGIN_SRC emacs-lisp
  (my-el-get-sync my-packages)
#+END_SRC

** テーマの設定

インストールしたテーマを設定します。
[[https://github.com/bbatsov/zenburn-emacs][zenburn]] テーマを使います:

#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC

** モードラインの設定

[[https://github.com/syl20bnr/spacemacs][Spacemacs]] でも使われている [[https://github.com/TheBB/spaceline][Spaceline]] を使って、見栄えもよく使いやすいモードラインを設定します。

#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :config
    (setq powerline-height (+ (frame-char-height) 10)
          powerline-default-separator 'slant
          spaceline-window-numbers-unicode t
          spaceline-workspace-numbers-unicode t
          spaceline-minor-modes-separator " ")
    (spaceline-spacemacs-theme)
    (set-face-attribute 'mode-line nil :box nil)
    (set-face-attribute 'mode-line-inactive nil :box nil))
#+END_SRC

** パッケージやモードごとの設定
*** ddskk
**** セットアップ

#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package skk-setup
    :defer t
    :config
    (bind-key* "C-x C-j" #'skk-mode)
    (bind-key* "C-`" #'skk-mode)
    (bind-key* "C-x j" #'skk-auto-fill-mode)
    (bind-key* "C-x t" #'skk-tutorial)
    (use-package skk
      :defer t
      :config
      <<ddskk-config>>
      ))
#+END_SRC

**** 初期設定
:PROPERTIES:
:noweb-ref: ddskk-config
:tangle: no
:END:

以下を参考にしています:

- [[http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/ddskk_config.html][Youhei SASAKI's official site: DDSKKの設定]]
- [[http://mugijiru.seesaa.net/article/275755984.html][暇だったからddskkの設定いじった: 麦汁三昧]]

ユーザー辞書の場所を設定します:

#+BEGIN_SRC emacs-lisp
  (setq skk-user-directory (my-data-directory! "skk"))
#+END_SRC

辞書の場所を設定します:

#+BEGIN_SRC emacs-lisp
  (use-package el-get-core)
  (setq skk-cdb-large-jisyo (f-expand "dic/SKK-JISYO.L.cdb" (el-get-package-directory "ddskk")))
#+END_SRC

各種ファイルの場所を設定します:

#+BEGIN_SRC emacs-lisp
  (setq skk-jisyo (f-expand "jisyo" skk-user-directory)
        skk-record-file (f-expand "record" skk-user-directory))
#+END_SRC

stickey-key の設定をします:

#+BEGIN_SRC emacs-lisp
  (setq skk-sticky-key ";")
#+END_SRC

ddskk 標準の設定では、 =C-j= (=newline-and-indent=) の挙動を完全にオーバーライドしてしまいます。
このままでは不便なため、挙動を調整します。

参考リンク: [[https://github.com/skk-dev/ddskk/blob/9ebbfcaa48bdef2b8fcf7f5e8cf5808561ae5d21/etc/dot.skk][ddskk/dot.skk at 9ebbfcaa48bdef2b8fcf7f5e8cf5808561ae5d21 · skk-dev/ddskk]]

#+BEGIN_SRC emacs-lisp
  ;; ■モードのまま C-j を有効とする
  (defun skk-C-j-key (arg)
    (interactive "P")
    (let ((enable-modes '(lisp-interaction-mode ; eval-print-last-sexp
                          emacs-lisp-mode       ; newline-and-indent
                          ;; and more.
                          )))
      (cond
       ((and (null (skk-in-minibuffer-p))
             (null skk-henkan-mode)
             (member major-mode enable-modes))
        (skk-emulate-original-map arg))
       (t
        (skk-kakutei arg)))))
  ;; 状態遷移規則のリストに追加する
  (add-to-list 'skk-rom-kana-rule-list
               '(skk-kakutei-key nil skk-C-j-key))
  ;; よく使う英単語を■モードのままでも
  (add-to-list 'skk-rom-kana-rule-list
               '("http" nil "http://"))
  (defadvice skk-latin-mode (after skk-latin-mode-free-cj activate)
    ;; latin-mode ではこのキーでかなモードに遷移する
    (bind-key "C-o" #'skk-kakutei skk-latin-mode-map)
    ;; latin-mode で C-j を明け渡す
    (unbind-key "C-j" skk-latin-mode-map))
  (defadvice skk-jisx0208-latin-mode (after skk-jisx0208-latin-mode-free-cj activate)
    ;; 全英モードではこのキーでかなモードに遷移する
    (bind-key "C-o" #'skk-kakutei skk-jisx0208-latin-mode-map)
    ;; 全英モードで C-j を明け渡す
    (unbind-key "C-j" skk-jisx0208-latin-mode-map))
  (use-package spaceline-config
    :config
    (defun skk-setup-modeline ()
      "モードラインの表示はspacelineに任せる")
    (spaceline-define-segment skk
      "SKKの現在の状態を表示します."
      (cond
       (skk-abbrev-mode skk-abbrev-mode-string)
       (skk-jisx0208-latin-mode skk-jisx0208-latin-mode-string)
       (skk-katakana skk-katakana-mode-string)
       (skk-j-mode skk-hiragana-mode-string)
       (skk-jisx0201-mode skk-jisx0201-mode-string)
       (t skk-latin-mode-string))
      :when (and active (bound-and-true-p skk-mode)))
    (spaceline-install
     '(((persp-name workspace-number window-number)
        :fallback evil-state
        :separator "|"
        :face highlight-face)
       anzu
       auto-compile
       skk
       (buffer-modified buffer-size buffer-id remote-host)
       major-mode
       (process :when active)
       ((flycheck-error flycheck-warning flycheck-info)
        :when active)
       ((minor-modes :separator spaceline-minor-modes-separator)
        :when active)
       (mu4e-alert-segment :when active)
       (erc-track :when active)
       (version-control :when active)
       (org-pomodoro :when active)
       (org-clock :when active)
       nyan-cat)
     '(which-function
       (python-pyvenv :fallback python-pyenv)
       (battery :when active)
       selection-info
       input-method
       ((buffer-encoding-abbrev
         point-position
         line-column)
        :separator " | ")
       (global :when active)
       buffer-position
       hud)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package context-skk
    :diminish "")
  (use-package skk-hint)
  (setq skk-hint-start-char ?:)
  ;; 空の辞書ファイルを作成
  (unless (file-exists-p skk-jisyo)
    (unless (file-directory-p skk-user-directory)
      (make-directory skk-user-directory t))
    (write-region "" nil skk-jisyo))
  (setq
   ;; Enter で改行しない
   skk-egg-like-newline t
   ;; 注釈の表示
   skk-show-annotation t
   ;; インジケータを左端に.
   skk-status-indicator 'left
   ;; 半角カナを入力
   skk-use-jisx0201-input-method t
   ;;"「"を入力したら"」"も自動で挿入
   skk-auto-insert-paren t
   ;; 見出し語と送り仮名がマッチした候補を優先して表示
   skk-henkan-strict-okuri-precedence t
   ;; インクリメンタルサーチではskkを利用しない
   skk-isearch-mode-enable nil
   skk-show-mode-show t
   skk-show-mode-style 'tooltip
   skk-status-indicator 'minor-mode)
  (skk-wrap-newline-command markdown-enter-key)
  (add-hook 'before-make-frame-hook #'ccc-setup)
#+END_SRC

*** migemo

#+BEGIN_SRC emacs-lisp
  (let* ((executable (executable-find "cmigemo"))
         (base-directory (when executable
                           (file-name-directory (file-truename executable))))
         (dictionary-candidates (when base-directory
                                  (list (expand-file-name "../share/migemo/utf-8/migemo-dict" base-directory)
                                        (expand-file-name "../share/cmigemo/utf-8/migemo-dict" base-directory)
                                        (expand-file-name "/dict/utf-8/migemo-dict" base-directory))))
         (dictionary-file (car-safe
                           (delq nil (mapcar (lambda (x) (and (file-exists-p x) x)) dictionary-candidates))))
         (migemo-dir (expand-file-name "migemo/" my-data-directory)))
    (when (and executable dictionary-file)
      (use-package migemo
                   :config
                   (when (not (file-directory-p migemo-dir))
                     (make-directory migemo-dir))
                   (setq migemo-command executable
                         migemo-options '("-q" "--emacs")
                         migemo-coding-system 'utf-8-unix
                         migemo-dictionary (file-truename dictionary-file)
                         migemo-user-dictionary nil
                         migemo-regex-dictionary nil
                         migemo-use-pattern-alist t
                         migemo-use-frequent-pattern-alist t
                         migemo-pattern-alist-length 2048
                         migemo-pattern-alist-file (expand-file-name "pattern-alist" migemo-dir)
                         migemo-frequent-pattern-alist-file (expand-file-name "frequent-alist" migemo-dir))
                   (migemo-init))))
#+END_SRC

*** auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish ""
    :init
    (setq ac-auto-start 0
          ac-candidate-limit nil
          ac-delay 0.2
          ac-dwim t
          ac-fuzzy-enable t
          ac-quick-help-delay 1.
          ac-use-comphist t
          ac-use-fuzzy t
          ac-use-menu-map t
          ac-use-quick-help t
          tab-always-indent 'complete)
    :bind (:map ac-menu-map
                ("C-n" . ac-next)
                ("C-p" . ac-previous))
    :config
    (ac-flyspell-workaround)
    (global-auto-complete-mode 1))
#+END_SRC

*** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish ((helm-mode . "")
               (helm-migemo-mode . ""))
    :bind (("C-x C-f" . helm-find-files)
           ("C-x C-r" . helm-recentf)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-buffers-list)
           ("M-x" . helm-M-x)
           ("C-M-o" . helm-occur)
           :map help-map
           ("a" . helm-apropos))
    :config
    ;; 無視するファイルを指定
    (setq helm-ff-auto-update-initial-value nil ; 自動補完を無効
          helm-ff-file-name-history-use-recentf t
          helm-findutils-skip-boring-files t ; 無視ファイルを非表示
          helm-for-files-preferred-list '(helm-source-locate
                                          helm-source-buffers-list
                                          helm-source-bookmarks
                                          helm-source-recentf
                                          helm-source-file-cache
                                          helm-source-files-in-current-dir)
          helm-boring-file-regexp-list '("\\.git\\'"
                                         "\\.hg\\'"
                                         "\\.svn\\'"
                                         "\\.CVS\\'"
                                         "\\._darcs\\'"
                                         "\\.la\\'"
                                         "\\.o\\'"
                                         "~\\'"
                                         "\\.class\\'"
                                         "\\.elc\\'"
                                         "\\.pyc\\'"))
    (helm-migemo-mode 1)
    (use-package helm-descbinds
      :config
      (helm-descbinds-mode t)
      (setq helm-descbinds-window-style 'split))
    (use-package helm-swoop
      :bind (("M-i" . helm-swoop)
             ("M-I" . helm-swoop-back-to-last-point)
             ("C-c M-i" . helm-multi-swoop)
             ("C-x M-i" . helm-multi-swoop-all)
             ("C-c s" . helm-multi-swoop-org)
             :map helm-swoop-map
             ("C-r" . helm-previous-line)
             ("C-s" . helm-next-line)
             :map helm-multi-swoop-map
             ("C-r" . helm-previous-line)
             ("C-s" . helm-next-line))
      :config
      (setq helm-multi-swoop-edit-save t
            helm-swoop-split-with-multiple-windows nil
            helm-swoop-split-direction 'split-window-vertically
            helm-swoop-move-to-line-cycle t
            helm-swoop-use-fuzzy-match t)))
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :config
    (setq magit-diff-refine-hunk 'all
          magit-git-executable (if (eq system-type 'windows-nt) "c:/Git/bin/git.exe" "git")))

  (use-package magit-autorevert
    :defer t
    :config (setq magit-auto-revert-mode-ligter ""))
#+END_SRC

*** persp

projectile とキープレフィクスが被っているので、
~C-c ,~ をプレフィクスにするように変更しています。

また、Helm と組み合わせて動くように、
[[https://gist.github.com/Bad-ptr/304ada85c9ba15013303][Support persp-mode buffer filtering in helm.]] の内容を設定しています。

#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :diminish (persp-mode . "")
    :init
    (setq persp-keymap-prefix (kbd "C-c ,"))
    :config
    (setq persp-save-dir (expand-file-name "persp-conf/" my-data-directory))
    (unless (file-directory-p persp-save-dir)
      (make-directory persp-save-dir t))
    (defun persp-on-startup () (persp-mode 1))
    (add-hook 'emacs-startup-hook #'persp-on-startup)
    :config
    (use-package helm
      :config
      (defvar helm-mini-tail-sources (cdr helm-mini-default-sources))
      (defvar helm-persp-completing-read-handlers
        '((switch-to-buffer                 . helm-persp-buffer-list-bridge)
          (kill-buffer                      . helm-persp-buffer-list-bridge)
          (persp-kill-buffer                . helm-persp-buffer-list-bridge)
          (persp-temporarily-display-buffer . helm-persp-buffer-list-bridge)
          (persp-add-buffer                 . helm-persp-buffer-list-bridge)
          (persp-remove-buffer              . helm-persp-buffer-list-bridge)))

      (defclass helm-persp-free-buffers-source (helm-source-buffers)
        ((buffer-list
          :initarg :buffer-list
          :initform #'(lambda () (mapcar #'buffer-name (persp-buffer-list-restricted nil 3)))
          :custom function
          :documentation
          "  A function with no arguments to create buffer list.")))

      (defvar helm-source-persp-free-buffers
        (helm-make-source "Free buffers"
            'helm-persp-free-buffers-source
          :fuzzy-match t))


      (defun helm-persp-buffers-list--init ()
        (let* ((buffers (funcall (helm-attr 'buffer-list)))
               (result (cl-loop for b in buffers
                                maximize (length b) into len-buf
                                maximize (length (with-current-buffer b
                                                   (format-mode-line mode-name)))
                                into len-mode
                                finally return (cons len-buf len-mode))))
          (unless (default-value 'helm-buffer-max-length)
            (helm-set-local-variable 'helm-buffer-max-length (car result)))
          (unless (default-value 'helm-buffer-max-len-mode)
            (helm-set-local-variable 'helm-buffer-max-len-mode (cdr result)))
          (helm-attrset 'candidates buffers)))

      (defclass helm-persp-buffers-source (helm-source-buffers)
        ((buffer-list
          :initarg :buffer-list
          :initform #'(lambda () (mapcar #'buffer-name (persp-buffers (helm-attr 'persp))))
          :custom function
          :documentation
          "  A function with no arguments to create buffer list.")
         (persp
          :initarg :persp
          :initform (get-current-persp))
         (init :initform #'helm-persp-buffers-list--init)))

      (defvar helm-persp-sources-list '(helm-source-persp-free-buffers))
      (defvar helm-persp-source-name-prefix "helm-source-persp-buffers-list-")

      (defmacro persp-helm--liftup-source (source-name)
        `(progn
           (setq helm-persp-sources-list
                 (cons ,source-name
                       (cl-delete ,source-name helm-persp-sources-list)))
           (setq helm-mini-default-sources
                 (append helm-persp-sources-list
                         helm-mini-tail-sources))))

      (defmacro persp-helm--soure-name-from-persp-name (pn)
        `(intern (concat helm-persp-source-name-prefix ,pn)))

      (add-hook 'persp-created-functions
                #'(lambda (p ph)
                    (when (and (eq ph *persp-hash*) p)
                      (let* ((pn (persp-name p))
                             (source-name (persp-helm--soure-name-from-persp-name pn)))
                        (eval
                         `(defvar ,source-name
                            (helm-make-source ,(concat pn " buffers")
                                'helm-persp-buffers-source :persp ,p)))
                        (setq helm-persp-sources-list
                              (append helm-persp-sources-list (list source-name))))
                      (setq helm-mini-default-sources
                            (append helm-persp-sources-list
                                    helm-mini-tail-sources)))))

      ;; (add-hook 'persp-before-switch-functions
      ;;           #'(lambda (next-pn)
      ;;               (let ((p (get-current-persp)))
      ;;                 (when p
      ;;                   (persp-helm--liftup-source 'helm-source-persp-free-buffers)))))

      ;; (add-hook 'persp-activated-hook
      ;;           #'(lambda ()
      ;;               (let ((p (get-current-persp)))
      ;;                 (when p
      ;;                   (let* ((pn (persp-name p))
      ;;                          (source-name (intern (concat helm-persp-source-name-prefix pn))))
      ;;                     (persp-helm--liftup-source source-name))))))

      (add-hook 'persp-before-kill-functions
                #'(lambda (p)
                    (when p
                      (let* ((pn (persp-name p))
                             (source-name (persp-helm--soure-name-from-persp-name pn)))
                        (setq helm-persp-sources-list
                              (cl-delete source-name helm-persp-sources-list))
                        (setq helm-mini-default-sources
                              (append helm-persp-sources-list
                                      helm-mini-tail-sources))
                        (makunbound source-name)))))

      (add-hook 'persp-mode-hook #'(lambda ()
                                     (if persp-mode
                                         (persp-helm-setup-bridge)
                                       (persp-helm-destroy-bridge))))

      (defun helm-persp-mini ()
        (interactive)
        (persp-helm--liftup-source 'helm-source-persp-free-buffers)
        (let* ((cbuf (current-buffer))
               (cbn (buffer-name cbuf)))
          (let ((persp (get-current-persp)))
            (when (and persp (persp-contain-buffer-p cbuf persp))
              (let ((source-name (persp-helm--soure-name-from-persp-name (persp-name persp))))
                (persp-helm--liftup-source source-name))))
          (or
           (helm :sources helm-mini-default-sources
                 :ff-transformer-show-only-basename nil
                 :fuzzy-match helm-mode-fuzzy-match
                 :buffer "*helm persp mini*"
                 :keymap helm-buffer-map
                 :truncate-lines helm-buffers-truncate-lines
                 :default cbn
                 :preselect (substring cbn 0 (min (string-width cbn) helm-buffer-max-length)))
           (helm-mode--keyboard-quit))))

      (defun helm-persp-buffer-list-bridge
          (prompt _collection &optional test _require-match init hist default _inherit-im name buffer)
        (persp-helm--liftup-source 'helm-source-persp-free-buffers)
        (let ((persp (get-current-persp)))
          (when (and persp (persp-contain-buffer-p (current-buffer) persp))
            (let ((source-name (persp-helm--soure-name-from-persp-name (persp-name persp))))
              (persp-helm--liftup-source source-name))))
        (let ((deflt (or default "")))
          (or
           (helm :sources helm-persp-sources-list
                 :fuzzy-match helm-mode-fuzzy-match
                 :prompt prompt
                 :buffer buffer
                 :input init
                 :history hist
                 :resume 'noresume
                 :keymap helm-buffer-map
                 :truncate-lines helm-buffers-truncate-lines
                 :default deflt
                 :preselect (substring deflt 0 (min (string-width deflt) helm-buffer-max-length)))
           (helm-mode--keyboard-quit))))

      (defun persp-helm-setup-bridge ()
        (setq helm-completing-read-handlers-alist
              (append helm-persp-completing-read-handlers
                      helm-completing-read-handlers-alist))
        (bind-key "C-x b" #'helm-persp-mini))
      (defun persp-helm-destroy-bridge ()
        (setq helm-mini-default-sources
              (cons
               'helm-source-buffers-list
               helm-mini-tail-sources))
        (dolist (it helm-persp-completing-read-handlers)
          (setq helm-completing-read-handlers-alist
                (delete it helm-completing-read-handlers-alist)))
        (bind-key (kbd "C-x b") #'helm-mini))

      (when (bound-and-true-p persp-mode)
        (persp-helm-setup-bridge))))
#+END_SRC

*** Bookmark

#+BEGIN_SRC emacs-lisp
  (use-package bookmark+
    :config
    (setq my-bookmark-directory (expand-file-name "bookmark/" my-data-directory)
          bookmark-default-file (expand-file-name "bookmarks" my-bookmark-directory)
          bmkp-last-as-first-bookmark-file bookmark-default-file
          bmkp-bmenu-commands-file (expand-file-name ".emacs-bmk-bmenu-commands" my-bookmark-directory)
          bmkp-bmenu-state-file (expand-file-name ".emacs-bmk-bmenu-state" my-bookmark-directory)))
#+END_SRC

*** dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :bind (:map dired-mode-map
                ("r" . wdired-change-to-wdired-mode)
                ("q" . quit-window))
    :config
    (setq dired-listing-switches "-aFlh")
    (use-package dired+
      :config
      (diredp-toggle-find-file-reuse-dir t)))
  ;; cf. http://rubikitch.com/2014/12/22/dired-subtree/
  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                ("<tab>" . dired-subtree-toggle)
                ("S-<tab>" . dired-subtree-cycle)
                ("C-x n n" . dired-subtree-narrow)))
#+END_SRC

*** git-gutter

#+BEGIN_SRC emacs-lisp
  (if (or (eq window-system 'w32) (null window-system))
      (use-package git-gutter
        :diminish ""
        :config (global-git-gutter-mode t))
    (use-package git-gutter-fringe
      :diminish (git-gutter-mode . "")
      :config (global-git-gutter-mode t)))

#+END_SRC

*** calendar

#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :defer t
    :bind (("<f7>" . calendar)
           :map calendar-mode-map
                 ("l" . calendar-forward-day)
                 ("h" . calendar-backward-day)
                 ("j" . calendar-forward-week)
                 ("k" . calendar-backward-week)
                 ("<f7>" . calendar-exit))
    :config
    (setq calendar-mark-holidays-flag t
          calendar-month-name-array
          (vconcat
           (mapcar (lambda (n) (format "%d月" n)) (number-sequence 1 12)))
          calendar-day-name-array
          (vconcat
           (mapcar (lambda (c) (format "%c曜日" c)) "日月火水木金土")))
    (add-hook 'calendar-today-visible-hook #'calendar-mark-today))
  (use-package holidays
    :defer t
    :config
    (use-package japanese-holidays
      :config
      (setq calendar-holidays ; 他の国の祝日も表示させたい場合は適当に調整
            (append japanese-holidays holiday-local-holidays holiday-other-holidays))
      (add-hook 'calendar-today-visible-hook #'japanese-holiday-mark-weekend)
      (add-hook 'calendar-today-invisible-hook #'japanese-holiday-mark-weekend)
      (add-hook 'calendar-today-visible-hook #'calendar-mark-today)))
#+END_SRC

*** elisp-slimnav

#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :defer t
    :diminish "")
#+END_SRC

*** open-junk-file
#+BEGIN_SRC emacs-lisp
  (use-package open-junk-file
    :bind ("C-x C-z" . open-junk-file)
    :config (setq open-junk-file-directory (expand-file-name "junk/%Y/%m/%d-%H%M%S." my-data-directory)))
#+END_SRC

*** bm
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :demand t
    :init
    (setq bm-restore-repository-on-load t)
    (setq bm-repository-file (f-expand ".bm-repository" (my-data-directory! "bm")))
    :bind (("M-SPC" . bm-toggle)
           ("M-[" . bm-next)
           ("M-]" . bm-previous))
    :config
    (setq-default bm-buffer-persistence t)
    ;; Loading the repository from file when on start up.
    (add-hook' emacs-startup-hook #'bm-repository-load)
    ;; Restoring bookmarks when on file find.
    (add-hook 'find-file-hooks #'bm-buffer-restore)
    ;; Saving bookmark data on killing a buffer
    (add-hook 'kill-buffer-hook #'bm-buffer-save)
    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))
    ;; Update bookmark repository when saving the file.
    (add-hook 'after-save-hook #'bm-buffer-save)
    ;; Restore bookmarks when buffer is reverted.
    (add-hook 'after-revert-hook #'bm-buffer-restore))
#+END_SRC

*** eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :defer t
    :config
    (setq eshell-directory-name (expand-file-name "eshell/" my-data-directory)))
#+END_SRC

*** url

#+BEGIN_SRC emacs-lisp
  (use-package url
    :defer t
    :config
    (unless (file-directory-p url-configuration-directory)
      (make-directory url-configuration-directory t))
    ;; cf. https://github.com/punchagan/org2blog/issues/176#issuecomment-67693847
    (defun url-cookie-expired-p (cookie)
      "Return non-nil if COOKIE is expired."
      (let ((exp (url-cookie-expires cookie)))
        (and (> (length exp) 0)
             (condition-case ()
                 (> (float-time) (float-time (date-to-time exp)))
               (error nil))))))
#+END_SRC

*** wakatime
#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :diminish (wakatime-mode . "若")
    :config
      (when (executable-find "wakatime")
        (global-wakatime-mode 1)))
#+END_SRC

*** flyspell
#+BEGIN_SRC emacs-lisp
  (when (executable-find "aspell")
    (use-package flyspell
      :diminish ""
      :bind (:map flyspell-mode-map
                  ("C-." . flyspell-correct-word-before-point))
      :init
      (defun my-enable-flyspell-mode () (flyspell-mode 1))
      (defun my-disable-flyspell-mode () (flyspell-mode -1))
      (dolist (hook '(text-mode-hook org-mode-hook))
        (add-hook hook #'my-enable-flyspell-mode))
      (dolist (hook '(prog-mode-hook))
        (add-hook hook #'flyspell-prog-mode))
      (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
        (add-hook hook #'my-disable-flyspell-mode))
      :config
      (use-package ispell
        :config
        (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
      (setq ispell-dictionary "english"
            ispell-program-name "aspell")))
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish (yas-minor-mode . "")
    :bind (:map yas-minor-mode-map
                ("<C-tab>" . yas-expand))
    :config
    ; (unbind-key "<tab>" yas-minor-mode-map)
    (add-to-list 'hippie-expand-try-functions-list #'yas-hippie-try-expand)
    (yas-global-mode 1))
#+END_SRC

*** buffer-move

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :defer t
    :init
    (bind-keys* ("C-S-j" . buf-move-up)
                ("C-S-k" . buf-move-down)
                ("C-S-l" . buf-move-right)
                ("C-S-h" . buf-move-left)))
#+END_SRC

*** windmove

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :defer t
    :init
    (bind-keys* ("C-M-h" . windmove-left)
                ("C-M-k" . windmove-up)
                ("C-M-l" . windmove-right)
                ("C-M-j" . windmove-down))
    :config
    (setq windmove-wrap-around t))
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (let ((projectile-dir (expand-file-name "projectile" my-data-directory)))
      (unless (file-directory-p projectile-dir)
        (make-directory projectile-dir t))
      (setq projectile-enable-caching t
            projectile-switch-project-action #'projectile-dired
            projectile-remember-window-configs t
            projectile-ignored-projects '("/usr/local/")
            projectile-mode-line ""
            projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" projectile-dir)
            projectile-cache-file (expand-file-name "projectile.cache" projectile-dir)))
    (projectile-global-mode 1)
    :config
    (use-package helm-projectile
      :config
      (helm-projectile-on)))
#+END_SRC

*** wgrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :bind (:map wgrep-mode-map
                ("r" . wgrep-change-to-wgrep-mode))
    :config
    (add-hook 'ag-mode-hook #'wgrep-ag-setup))
#+END_SRC

*** operato-on-number

cf. https://github.com/bbatsov/prelude/blob/555abd9a2fe3f55a0cb35d4b58f54d6cc32cebc6/core/prelude-editor.el#L401-L416

#+BEGIN_SRC emacs-lisp
  (use-package operate-on-number
    :config
    (use-package smartrep
      :config
      (smartrep-define-key global-map "C-c ."
                           '(("+" . apply-operation-to-number-at-point)
                             ("-" . apply-operation-to-number-at-point)
                             ("*" . apply-operation-to-number-at-point)
                             ("/" . apply-operation-to-number-at-point)
                             ("\\" . apply-operation-to-number-at-point)
                             ("^" . apply-operation-to-number-at-point)
                             ("<" . apply-operation-to-number-at-point)
                             (">" . apply-operation-to-number-at-point)
                             ("#" . apply-operation-to-number-at-point)
                             ("%" . apply-operation-to-number-at-point)
                             ("'" . operate-on-number-at-point)))))
#+END_SRC

*** smartrep

#+BEGIN_SRC emacs-lisp
  (use-package smartrep
    :config
    (smartrep-define-key org-mode-map "C-c"
      '(("C-n" . outline-next-visible-heading))))
#+END_SRC

*** org-mode

~org-goto (C-j)~ は大変便利。

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c b" . org-iswitchb))
    :config
    (defvar my-org-journal-directory (expand-file-name "journal/" org-directory))
    (setq org-adapt-indentation nil
          org-agenda-files `(,org-directory)
          org-default-notes-file (expand-file-name "notes.org" org-directory))
    ;; cf. http://emacs.stackexchange.com/a/13828
    (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n")
    (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
    (defun my-org-mode-hook ()
      (set (make-local-variable 'system-time-locale) "C")
      (org-display-inline-images))
    (add-hook 'org-mode-hook #'my-org-mode-hook))

  (use-package org-agenda
    :defer t
    :bind (("C-c a" . org-agenda))
    :config
    (setq org-agenda-custom-commands
          `(("j" . "JOURNAL")
            ("ja" "Journal Agenda" agenda nil
             ((org-agenda-files (list ,my-org-journal-directory))))
            ("jt" "Journal TODO" todo nil
             ((org-agenda-files (list ,my-org-journal-directory))))
            ("js" "Journal Search" search nil
             ((org-agenda-files (list ,my-org-journal-directory)))))))

  (use-package ox-html
    :defer t
    :config
    (setq org-html-htmlize-output-type))

  (use-package ox
    :defer t
    :config
    (setq org-export-allow-bind-keywords t
          org-export-date-timestamp-format "%M"))

  (use-package org-present
    :defer t
    :config
    (defun my-org-present-mode-hook ()
      (org-present-big)
      (org-display-inline-images)
      (org-present-hide-cursor)
      (org-present-read-only)
      (linum-mode -1))

    (defun my-org-present-mode-quit-hook ()
      (org-present-small)
      (org-remove-inline-images)
      (org-present-show-cursor)
      (org-present-read-write)
      (linum-mode +1))

    (add-hook 'org-present-mode-hook #'my-org-present-mode-hook)
    (add-hook 'org-present-mode-quit-hook #'my-org-present-mode-quit-hook))

  (use-package helm-org
    :bind (("C-c c" . helm-org-capture-templates))
    :config
    (setq org-capture-templates
          `(("j" "Journal"
             entry
             (file+datetree
              ,(expand-file-name
                (format (format-time-string "journal-%Y-%%s.org") (system-name))
                my-org-journal-directory))
             "* %?\n%T\n%i"
             :prepend t
             :empty-lines 1
             :jump-to-captured t))))
#+END_SRC

**** ob-plantuml

org-mode 内で図を確認しながら plantuml を書くことが出来ます。いつも書き方を忘れる…。

以下のように書いて ~C-c C-c~ すると、 plantuml を実行してファイルを生成しつつ、画像を文書内に表示出来ます。
これは snippet に登録した方がいな。。

#+BEGIN_SRC org :tangle no
  ,#+BEGIN_SRC plantuml :file sample2.png :cmdline -charset UTF-8
    アリス -> ボブ: Authentication Request
    ボブ --> アリス: Authentication Response
  ,#+END_SRC
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-plantuml
    :config
    (add-to-list 'org-babel-load-languages '(plantuml . t))
    ;; el-get では自動的に jar を DL してパスをセットするところまでやってくれる!
    (setq org-plantuml-jar-path plantuml-jar-path)
    ;; plantuml 実行後に画像をすぐ表示してほしい
    (add-hook 'org-babel-after-execute-hook #'org-display-inline-images))
#+END_SRC

**** ox-taskjuggler

#+BEGIN_SRC emacs-lisp
  (use-package ox-taskjuggler
    :init
    (add-to-list 'org-export-backends 'taskjuggler)
    :config
    ;; http://www.taskjuggler.org/tj3/manual/resource.html
    (setq org-taskjuggler-valid-resource-attributes '(
                                                      booking
                                                      chargeset
                                                      efficiency
                                                      email
                                                      fail
                                                      flags
                                                      journalentry
                                                      leaveallowance
                                                      leaves
                                                      limits
                                                      managers
                                                      purge
                                                      rate
                                                      resource
                                                      shifts
                                                      supplement
                                                      vacation
                                                      warn
                                                      workinghours
                                                      )
          org-taskjuggler-valid-report-attributes '(
                                                    balance
                                                    caption
                                                    columns
                                                    definitions
                                                    footer
                                                    formats
                                                    header
                                                    headline
                                                    hideresource
                                                    hidetask
                                                    loadunit
                                                    period
                                                    sorttasks
                                                    timeformat
                                                    timeformat
                                                    )
          org-taskjuggler-target-version 3.6))
#+END_SRC

**** org-ac

#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :config
    (org-ac/config-default))
#+END_SRC

*** ElDoc

https://www.emacswiki.org/emacs/ElDoc

#+BEGIN_SRC emacs-lisp
  (dolist (i '(emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook))
    (add-hook i #'turn-on-eldoc-mode))
  (diminish 'eldoc-mode)
  (use-package eldoc-eval
    :defer t
    :init (eldoc-in-minibuffer-mode 1))
#+END_SRC

*** eww
#+BEGIN_SRC emacs-lisp
  (use-package eww
    :defer t
    :bind (("C-x g" . eww)))
#+END_SRC

*** ace-link

#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    :defer t
    :init (ace-link-setup-default)
    :bind (:map org-mode-map
                ("C-c M-o" . ace-link-org)))
#+END_SRC

*** multiple-cursors

[[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el: Multiple cursors for emacs.]]

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this))
    :init
    (setq mc/list-file (expand-file-name ".mc-lists.el" my-data-directory)))
#+END_SRC

*** google-c-style

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook #'google-set-c-style)
  (add-hook 'c-mode-common-hook #'google-make-newline-indent)
#+END_SRC

*** web-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+END_SRC

*** crontab-mode

#+BEGIN_SRC emacs-lisp
  (use-package crontab-mode
    :mode "\\.cron\\(tab\\)?\\'" "cron\\(tab\\)?\\.")
#+END_SRC

*** js

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'"    . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.pac\\'"   . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    :config
    (setq-default js-indent-level 2))
#+END_SRC

*** markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(md\\|mdown\\|markdown\\)\\'" . gfm-mode))
    :config
    (let ((marked (executable-find "marked")))
      (when marked 
        (setq markdown-command marked)))
    ;; Marked2にしたい…
    (let ((marked "/Applications/Marked.app/Contents/Resources/mark"))
      (when (file-exists-p marked)
        (setq markdown-open-command marked))))
#+END_SRC

*** quickrun - すばやくコマンドを実行

[[https://github.com/syohex/emacs-quickrun][syohex/emacs-quickrun]]

**** ユーザ定義コマンドの例

#+BEGIN_SRC emacs-lisp
  (use-package quickrun
    :config
    ;; Use this parameter as C++ default
    (quickrun-add-command "c++/c1z"
                          '((:command . "g++")
                            (:exec    . ("%c -std=c++1z %o -o %e %s"
                                         "%e %a"))
                            (:remove  . ("%e")))
                          :default "c++")

    ;; Use this parameter in pod-mode
    (quickrun-add-command "pod"
                          '((:command . "perldoc")
                            (:exec    . "%c -T -F %s"))
                          :mode 'pod-mode)

    ;; You can override existing command
    (quickrun-add-command "c/gcc"
                          '((:exec . ("%c -std=c++1z %o -o %e %s"
                                      "%e %a")))
                          :override t))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :config
    (setq enh-ruby-deep-indent-paren nil)
    (add-hook 'enh-ruby-mode #'turn-on-eldoc-mode))

  (use-package ruby-end
    :diminish "")

  (use-package yard-mode
    :defer t
    :diminish (yard-mode . "")
    :init
    (add-hook 'ruby-mode-hook #'yard-mode)
    (add-hook 'enh-ruby-mode-hook #'yard-mode))
#+END_SRC

*** Scala

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :init (add-hook 'scala-mode-hook #'ensime-mode)
    :commands ensime ensime-mode
    :config
    (setq ensime-completion-style 'auto-complete))
  (use-package scala-mode2
    :interpreter ("scala" . scala-mode)
    :config
    (setq scala-indent:use-javadoc-style t))
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+END_SRC

*** beacon

カーソルが大きく動いたときに

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :defer t
    :diminish ""
    :init (beacon-mode 1))
#+END_SRC

*** diminish

#+BEGIN_SRC emacs-lisp
  (diminish 'auto-revert-mode)
  (diminish 'abbrev-mode)
  (diminish 'auto-fill-function)
#+END_SRC

*** info+

#+BEGIN_SRC emacs-lisp
  (use-package info
    :defer t
    :config
    (use-package info+))
#+END_SRC

*** volatile-highlights

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :diminish ""
    :config
    (volatile-highlights-mode t))
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish ""
    :init
    (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode))
#+END_SRC

*** easy-kill

リージョンを指定せずに =M-w= したときの挙動を改善します。

以下の機能が使えるようになります:

1. =M-w w= :: 現在位置の単語をコピーします
2. =M-w s= :: 現在位置のS式をコピーします
3. =M-w l= :: 現在位置のリストをコピーします
4. =M-w d= :: 現在位置の関数定義全体をコピーします
5. =M-w D= :: 現在位置の関数名をコピーします
6. =M-w f= :: 現在位置のファイル名をコピーします
7. =M-w b= :: 現在のバッファのファイル名をコピーします。さらに =-= でディレクトリ名、 =+= でフルパス、 =0= でファイル名のみに変更します。

また、選択範囲を変更するには以下のキーを使います:

1. =@= :: 最後にコピーした内容に追加して終了します。例えば、 =M-w d @= で現在の関数名を最後にコピーした内容に追加します。
2. =C-w= :: 選択範囲をカットして終了します。
3. =+=, =-=, =1..9= :: 選択範囲を拡張/縮小します。
4. =0= 選択範囲を初期化します。
5. =C-SPC= :: 選択範囲をアクティブリージョンにします。
6. =C-g= :: 中止します。
7. =?= :: ヘルプを表示します。

#+BEGIN_SRC emacs-lisp
  (bind-keys ([remap kill-ring-save] . easy-kill)
             ([remap mark-sexp] . easy-mark))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish "")
#+END_SRC


*** 未整理

ごちゃごちゃ詰め込んでいます。

#+BEGIN_SRC emacs-lisp
    (use-package apache-mode
      :mode ("\\.htaccess\\'"
             "httpd\\.conf\\'"
             "srm\\.conf\\'"
             "access\\.conf\\'"
             "sites-\\(available\\|enabled\\)/"))

    (use-package ag
      :config
      (setq ag-highlight-search t
            ag-reuse-window t))

    (use-package ace-isearch
      :diminish ""
      :config (global-ace-isearch-mode +1))

    (use-package eyebrowse
      :init
      (setq eyebrowse-keymap-prefix (kbd "C-c w"))
      :config
      (eyebrowse-mode 1))

    (use-package anzu
      :diminish "杏"
      :config
      (setq anzu-use-migemo t
            anzu-input-idle-delay 0.5
            anzu-minimum-input-length 2
            anzu-cons-mode-line-p nil)
      (global-anzu-mode t))

    (use-package flycheck
      :diminish "査"
      :config
      (flycheck-pos-tip-mode)
      (add-hook 'emacs-startup-hook #'global-flycheck-mode))

    (use-package fancy-battery
      :config
      (setq-default fancy-battery-show-percentage t)
      (fancy-battery-mode))

    (use-package window-numbering
      :config
      (setq window-numbering-auto-assign-0-to-minibuffer nil)
      (defun window-numbering-install-mode-line (&optional position)
        "Do nothing, the display is handled by the powerline.")
      (window-numbering-mode 1))

    (use-package which-key
      :config (which-key-mode))

    (use-package golden-ratio
      :diminish "金"
      :config
      (setq golden-ratio-exclude-modes '(
                                         "bs-mode"
                                         "calc-mode"
                                         "dired-mode"
                                         "ediff-mode"
                                         "gdb-breakpoints-mode"
                                         "gdb-disassembly-mode"
                                         "gdb-frames-mode"
                                         "gdb-inferior-io-mode"
                                         "gdb-inferior-io-mode"
                                         "gdb-locals-mode"
                                         "gdb-memory-mode"
                                         "gdb-registers-mode"
                                         "gdb-threads-mode"
                                         "gud-mode"
                                         "gud-mode"
                                         "restclient-mode"
                                         "speedbar-mode"
                                         ))
      (setq golden-ratio-extra-commands
            (append golden-ratio-extra-commands
                    '(
                      ace-delete-window
                      ace-maximize-window
                      ace-select-window
                      ace-swap-window
                      ace-window
                      avy-pop-mark
                      buf-move-down
                      buf-move-left
                      buf-move-right
                      buf-move-up
                      ess-eval-buffer-and-go
                      ess-eval-function-and-go
                      ess-eval-line-and-go
                      evil-avy-goto-line
                      evil-avy-goto-word-or-subword-1
                      select-window-0
                      select-window-1
                      select-window-2
                      select-window-3
                      select-window-4
                      select-window-5
                      select-window-6
                      select-window-7
                      select-window-8
                      select-window-9
                      windmove-down
                      windmove-left
                      windmove-right
                      windmove-up
                      )))
      (add-to-list 'golden-ratio-exclude-buffer-regexp "^\\*[hH]elm.*")
      (golden-ratio-mode))

    (use-package rainbow-mode
      :diminish (rainbow-mode . "虹")
      :config
      (rainbow-mode t))
    (use-package rainbow-identifiers
      :config
      (add-hook 'prog-mode-hook #'rainbow-identifiers-mode))
    (use-package rainbow-delimiters
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** OS X

OS X 特有の設定を行います。

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-function-modifier 'hyper)
    (setq ns-command-modifier 'meta)
    (setq ns-alternate-modifier 'super)
    (setq face-font-rescale-alist '(("Ricty Discord" . 1.08)))
    (let* ((fonts (list (font-spec :name "Ricty Discord" :size 13)
                        (font-spec :name "Source Han Code JP" :size 13)
                        (font-spec :name "Source Code Pro" :size 13)))
           (font (cl-find-if (lambda (font) (find-font font)) fonts)))
      (set-frame-font font))

    ;; これが無いと powerline のみためが悪い
    ;; cf. https://github.com/milkypostman/powerline/issues/54#issuecomment-65078550
    (setq ns-use-srgb-colorspace nil)

    ;; Enable emoji, and stop the UI from freezing when trying to display them.
    (if (fboundp 'set-fontset-font)
        (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend)))
#+END_SRC

# (set-face-attribute 'default nil :family "Ricty Discord" :height 130)
# nil
# ELISP> (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Ricty Discord"))
# nil
# ELISP> (setq face-font-rescale-alist '(("Ricty Discord" . 1.08)))

** 仕上げ

ユーザーのカスタム設定ファイルの場所を設定します:

#+BEGIN_SRC emacs-lisp
  (setq custom-file (f-expand "custom.el" my-personal-directory))
#+END_SRC

上記のファイルも含めた個人設定ファイルをロードします:

#+BEGIN_SRC emacs-lisp
  (mapc #'load (directory-files my-personal-directory 't "^[^#].*el\\'"))
#+END_SRC
