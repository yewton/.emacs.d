#+STARTUP: content
* .emacs.d

yewton の ~.emacs.d~ です。

[[./images/screenshot.png]]
** ヘッダー

tangle されたファイルに付与されるヘッダです。

#+BEGIN_SRC emacs-lisp :padline no
;;; -*- coding: utf-8; lexical-binding: t -*-
#+END_SRC

ここでは、 ~:padline no~ を付けないとファイルの先頭に空行が入ってしまいます。

** 基本的なセットアップ

[[file:my-fundamental.org][基本的なセットアップ]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-fundamental.org" user-emacs-directory))
#+END_SRC

** 特定のパッケージに依存しない設定

[[file:my-package-agnostic.org][特定のパッケージに依存しない設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-package-agnostic.org" user-emacs-directory))
#+END_SRC

** パッケージのインストール

[[file:my-install-packages.org][パッケージのインストール設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-install-packages.org" user-emacs-directory))
#+END_SRC

** テーマの設定

インストールしたテーマを設定します。
[[https://github.com/bbatsov/zenburn-emacs][zenburn]] テーマを使います:

#+BEGIN_SRC emacs-lisp
  (load-theme 'leuven t)
#+END_SRC

** モードラインの設定

[[https://github.com/syl20bnr/spacemacs][Spacemacs]] でも使われている [[https://github.com/TheBB/spaceline][Spaceline]] を使って、見栄えもよく使いやすいモードラインを設定します。

#+BEGIN_SRC emacs-lisp
  (use-package spaceline-config
    :config
    (setq powerline-height (+ (frame-char-height) 10)
          powerline-default-separator 'slant
          spaceline-window-numbers-unicode t
          spaceline-workspace-numbers-unicode t
          spaceline-minor-modes-separator " ")
    (spaceline-spacemacs-theme)
    (set-face-attribute 'mode-line nil :box nil)
    (set-face-attribute 'mode-line-inactive nil :box nil))
#+END_SRC

** パッケージやモードごとの設定
*** ddskk

[[file:my-ddskk.org][DDSKKの設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-ddskk.org" user-emacs-directory))
#+END_SRC

*** migemo

#+BEGIN_SRC emacs-lisp
  (let* ((executable (executable-find "cmigemo"))
         (base-directory (when executable
                           (file-name-directory (file-truename executable))))
         (dictionary-candidates (when base-directory
                                  (list (expand-file-name "../share/migemo/utf-8/migemo-dict" base-directory)
                                        (expand-file-name "../share/cmigemo/utf-8/migemo-dict" base-directory)
                                        (expand-file-name "/dict/utf-8/migemo-dict" base-directory))))
         (dictionary-file (car-safe
                           (delq nil (mapcar (lambda (x) (and (file-exists-p x) x)) dictionary-candidates))))
         (migemo-dir (expand-file-name "migemo/" my-data-directory)))
    (when (and executable dictionary-file)
      (use-package migemo
                   :config
                   (when (not (file-directory-p migemo-dir))
                     (make-directory migemo-dir))
                   (setq migemo-command executable
                         migemo-options '("-q" "--emacs")
                         migemo-coding-system 'utf-8-unix
                         migemo-dictionary (file-truename dictionary-file)
                         migemo-user-dictionary nil
                         migemo-regex-dictionary nil
                         migemo-use-pattern-alist t
                         migemo-use-frequent-pattern-alist t
                         migemo-pattern-alist-length 2048
                         migemo-pattern-alist-file (expand-file-name "pattern-alist" migemo-dir)
                         migemo-frequent-pattern-alist-file (expand-file-name "frequent-alist" migemo-dir))
                   (migemo-init))))
#+END_SRC

*** auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish ""
    :init
    (setq ac-auto-start 0
          ac-candidate-limit nil
          ac-delay 0.2
          ac-dwim t
          ac-fuzzy-enable t
          ac-quick-help-delay 1.
          ac-use-comphist t
          ac-use-fuzzy t
          ac-use-menu-map t
          ac-use-quick-help t
          tab-always-indent 'complete)
    :bind (:map ac-menu-map
                ("C-n" . ac-next)
                ("C-p" . ac-previous))
    :config
    (ac-flyspell-workaround)
    (global-auto-complete-mode 1))
#+END_SRC

*** swiper, ivy

- https://github.com/abo-abo/swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :init
    (setq ivy-use-virtual-buffers t)
    (ivy-mode 1)
    ;; cf. http://rubikitch.com/2015/03/18/swiper/
    (defun isearch-forward-or-swiper (use-swiper)
      (interactive "P")
      (let (current-prefix-arg)
        (call-interactively (if use-swiper #'swiper #'isearch-forward))))
    (global-set-key (kbd "C-s") 'isearch-forward-or-swiper)
    :bind (("C-s" . isearch-forward-or-swiper)
           ("C-c C-r" . ivy-resume)
           ("<f6>" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("<help> b" . counsel-descbinds)
           ("<help> f" . counsel-describe-function)
           ("<help> v" . counsel-describe-variable)
           ("<help> l" . counsel-load-library)
           ("<f2> i" . counsel-info-lookup-symbol)
           ("<f2> u" . counsel-unicode-char)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           :map read-expression-map
           ("C-r" . counsel-expression-history)
           :map ivy-minibuffer-map
           ("C-l" . ivy-backward-delete-char)))
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :config
    (setq magit-diff-refine-hunk 'all
          magit-git-executable (if (eq system-type 'windows-nt) "c:/Git/bin/git.exe" "git")))

  (use-package magit-autorevert
    :defer t
    :config (setq magit-auto-revert-mode-ligter ""))
#+END_SRC

*** Bookmark

#+BEGIN_SRC emacs-lisp
  (use-package bookmark+
    :config
    (setq my-bookmark-directory (expand-file-name "bookmark/" my-data-directory)
          bookmark-default-file (expand-file-name "bookmarks" my-bookmark-directory)
          bmkp-last-as-first-bookmark-file bookmark-default-file
          bmkp-bmenu-commands-file (expand-file-name ".emacs-bmk-bmenu-commands" my-bookmark-directory)
          bmkp-bmenu-state-file (expand-file-name ".emacs-bmk-bmenu-state" my-bookmark-directory)))
#+END_SRC

*** dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :bind (:map dired-mode-map
                ("r" . wdired-change-to-wdired-mode)
                ("q" . quit-window))
    :config
    (setq dired-listing-switches "-aFlh")
    (use-package dired+
      :config
      (diredp-toggle-find-file-reuse-dir t)))
  ;; cf. http://rubikitch.com/2014/12/22/dired-subtree/
  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                ("<tab>" . dired-subtree-toggle)
                ("S-<tab>" . dired-subtree-cycle)
                ("C-x n n" . dired-subtree-narrow)))
#+END_SRC

*** git-gutter

#+BEGIN_SRC emacs-lisp
  (if (or (eq window-system 'w32) (null window-system))
      (use-package git-gutter
        :diminish ""
        :config (global-git-gutter-mode t))
    (use-package git-gutter-fringe
      :diminish (git-gutter-mode . "")
      :config (global-git-gutter-mode t)))

#+END_SRC

*** calendar

#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :defer t
    :bind (("<f7>" . calendar)
           :map calendar-mode-map
                 ("l" . calendar-forward-day)
                 ("h" . calendar-backward-day)
                 ("j" . calendar-forward-week)
                 ("k" . calendar-backward-week)
                 ("<f7>" . calendar-exit))
    :config
    (setq calendar-mark-holidays-flag t
          calendar-month-name-array
          (vconcat
           (mapcar (lambda (n) (format "%d月" n)) (number-sequence 1 12)))
          calendar-day-name-array
          (vconcat
           (mapcar (lambda (c) (format "%c曜日" c)) "日月火水木金土")))
    (add-hook 'calendar-today-visible-hook #'calendar-mark-today))
  (use-package holidays
    :defer t
    :config
    (use-package japanese-holidays
      :config
      (setq calendar-holidays ; 他の国の祝日も表示させたい場合は適当に調整
            (append japanese-holidays holiday-local-holidays holiday-other-holidays))
      (add-hook 'calendar-today-visible-hook #'japanese-holiday-mark-weekend)
      (add-hook 'calendar-today-invisible-hook #'japanese-holiday-mark-weekend)
      (add-hook 'calendar-today-visible-hook #'calendar-mark-today)))
#+END_SRC

*** elisp-slimnav

#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :defer t
    :diminish "")
#+END_SRC

*** open-junk-file
#+BEGIN_SRC emacs-lisp
  (use-package open-junk-file
    :bind ("C-x C-z" . open-junk-file)
    :config (setq open-junk-file-directory (expand-file-name "junk/%Y/%m/%d-%H%M%S." my-data-directory)))
#+END_SRC

*** bm
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :demand t
    :init
    (setq bm-restore-repository-on-load t)
    (setq bm-repository-file (f-expand ".bm-repository" (my-data-directory! "bm")))
    :bind (("M-SPC" . bm-toggle)
           ("M-[" . bm-next)
           ("M-]" . bm-previous))
    :config
    (setq-default bm-buffer-persistence t)
    ;; Loading the repository from file when on start up.
    (add-hook' emacs-startup-hook #'bm-repository-load)
    ;; Restoring bookmarks when on file find.
    (add-hook 'find-file-hooks #'bm-buffer-restore)
    ;; Saving bookmark data on killing a buffer
    (add-hook 'kill-buffer-hook #'bm-buffer-save)
    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))
    ;; Update bookmark repository when saving the file.
    (add-hook 'after-save-hook #'bm-buffer-save)
    ;; Restore bookmarks when buffer is reverted.
    (add-hook 'after-revert-hook #'bm-buffer-restore))
#+END_SRC

*** eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :defer t
    :config
    (setq eshell-directory-name (expand-file-name "eshell/" my-data-directory)))
#+END_SRC

*** url

#+BEGIN_SRC emacs-lisp
  (use-package url
    :defer t
    :config
    (unless (file-directory-p url-configuration-directory)
      (make-directory url-configuration-directory t))
    ;; cf. https://github.com/punchagan/org2blog/issues/176#issuecomment-67693847
    (defun url-cookie-expired-p (cookie)
      "Return non-nil if COOKIE is expired."
      (let ((exp (url-cookie-expires cookie)))
        (and (> (length exp) 0)
             (condition-case ()
                 (> (float-time) (float-time (date-to-time exp)))
               (error nil))))))
#+END_SRC

*** wakatime
#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :diminish (wakatime-mode . "若")
    :config
    (when (executable-find "wakatime")
      (add-hook 'emacs-startup-hook #'global-wakatime-mode)))
#+END_SRC

*** flyspell
#+BEGIN_SRC emacs-lisp
  (when (executable-find "aspell")
    (use-package flyspell
      :diminish ""
      :bind (:map flyspell-mode-map
                  ("C-." . flyspell-correct-word-before-point))
      :init
      (defun my-enable-flyspell-mode () (flyspell-mode 1))
      (defun my-disable-flyspell-mode () (flyspell-mode -1))
      (dolist (hook '(text-mode-hook org-mode-hook))
        (add-hook hook #'my-enable-flyspell-mode))
      (dolist (hook '(prog-mode-hook))
        (add-hook hook #'flyspell-prog-mode))
      (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
        (add-hook hook #'my-disable-flyspell-mode))
      :config
      (use-package ispell
        :config
        (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
      (setq ispell-dictionary "english"
            ispell-program-name "aspell")))
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish (yas-minor-mode . "")
    :bind (:map yas-minor-mode-map
                ("<C-tab>" . yas-expand))
    :config
    ; (unbind-key "<tab>" yas-minor-mode-map)
    (add-to-list 'hippie-expand-try-functions-list #'yas-hippie-try-expand)
    (yas-global-mode 1))
#+END_SRC

*** buffer-move

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :defer t
    :init
    (bind-keys* ("C-S-j" . buf-move-up)
                ("C-S-k" . buf-move-down)
                ("C-S-l" . buf-move-right)
                ("C-S-h" . buf-move-left)))
#+END_SRC

*** windmove

#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :defer t
    :init
    (bind-keys* ("C-M-h" . windmove-left)
                ("C-M-k" . windmove-up)
                ("C-M-l" . windmove-right)
                ("C-M-j" . windmove-down))
    :config
    (setq windmove-wrap-around t))
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (let ((projectile-dir (expand-file-name "projectile" my-data-directory)))
      (unless (file-directory-p projectile-dir)
        (make-directory projectile-dir t))
      (setq projectile-enable-caching t
            projectile-switch-project-action #'projectile-dired
            projectile-remember-window-configs t
            projectile-ignored-projects '("/usr/local/")
            projectile-mode-line ""
            projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" projectile-dir)
            projectile-cache-file (expand-file-name "projectile.cache" projectile-dir)))
    (projectile-global-mode 1)
    :config
    (use-package counsel-projectile
      :init
      (counsel-projectile-on)))
#+END_SRC

*** wgrep

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :bind (:map wgrep-mode-map
                ("r" . wgrep-change-to-wgrep-mode))
    :config
    (add-hook 'ag-mode-hook #'wgrep-ag-setup))
#+END_SRC

*** operato-on-number

cf. https://github.com/bbatsov/prelude/blob/555abd9a2fe3f55a0cb35d4b58f54d6cc32cebc6/core/prelude-editor.el#L401-L416

#+BEGIN_SRC emacs-lisp
  (use-package operate-on-number
    :config
    (use-package smartrep
      :config
      (smartrep-define-key global-map "C-c ."
                           '(("+" . apply-operation-to-number-at-point)
                             ("-" . apply-operation-to-number-at-point)
                             ("*" . apply-operation-to-number-at-point)
                             ("/" . apply-operation-to-number-at-point)
                             ("\\" . apply-operation-to-number-at-point)
                             ("^" . apply-operation-to-number-at-point)
                             ("<" . apply-operation-to-number-at-point)
                             (">" . apply-operation-to-number-at-point)
                             ("#" . apply-operation-to-number-at-point)
                             ("%" . apply-operation-to-number-at-point)
                             ("'" . operate-on-number-at-point)))))
#+END_SRC

*** smartrep

#+BEGIN_SRC emacs-lisp
  (use-package smartrep
    :config
    (smartrep-define-key org-mode-map "C-c"
      '(("C-n" . outline-next-visible-heading))))
#+END_SRC

*** org-mode

[[file:my-org.org][Org-modeの設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-org.org" user-emacs-directory))
#+END_SRC

*** ElDoc

https://www.emacswiki.org/emacs/ElDoc

#+BEGIN_SRC emacs-lisp
  (dolist (i '(emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook))
    (add-hook i #'turn-on-eldoc-mode))
  (diminish 'eldoc-mode)
  (use-package eldoc-eval
    :defer t
    :init (eldoc-in-minibuffer-mode 1))
#+END_SRC

*** eww
#+BEGIN_SRC emacs-lisp
  (use-package eww
    :defer t
    :bind (("C-x g" . eww)))
#+END_SRC

*** ace-link

#+BEGIN_SRC emacs-lisp
  (use-package ace-link
    :defer t
    :init (ace-link-setup-default)
    :bind (:map org-mode-map
                ("C-c M-o" . ace-link-org)))
#+END_SRC

*** multiple-cursors

[[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el: Multiple cursors for emacs.]]

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this))
    :init
    (setq mc/list-file (expand-file-name ".mc-lists.el" my-data-directory)))
#+END_SRC

*** google-c-style

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook #'google-set-c-style)
  (add-hook 'c-mode-common-hook #'google-make-newline-indent)
#+END_SRC

*** web-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+END_SRC

*** crontab-mode

#+BEGIN_SRC emacs-lisp
  (use-package crontab-mode
    :mode "\\.cron\\(tab\\)?\\'" "cron\\(tab\\)?\\.")
#+END_SRC

*** js

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'"    . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.pac\\'"   . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    :config
    (setq-default js-indent-level 2))
#+END_SRC

*** markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(md\\|mdown\\|markdown\\)\\'" . gfm-mode))
    :config
    (let ((marked (executable-find "marked")))
      (when marked 
        (setq markdown-command marked)))
    ;; Marked2にしたい…
    (let ((marked "/Applications/Marked.app/Contents/Resources/mark"))
      (when (file-exists-p marked)
        (setq markdown-open-command marked))))
#+END_SRC

*** quickrun - すばやくコマンドを実行

[[https://github.com/syohex/emacs-quickrun][syohex/emacs-quickrun]]

**** ユーザ定義コマンドの例

#+BEGIN_SRC emacs-lisp
  (use-package quickrun
    :config
    ;; Use this parameter as C++ default
    (quickrun-add-command "c++/c1z"
                          '((:command . "g++")
                            (:exec    . ("%c -std=c++1z %o -o %e %s"
                                         "%e %a"))
                            (:remove  . ("%e")))
                          :default "c++")

    ;; Use this parameter in pod-mode
    (quickrun-add-command "pod"
                          '((:command . "perldoc")
                            (:exec    . "%c -T -F %s"))
                          :mode 'pod-mode)

    ;; You can override existing command
    (quickrun-add-command "c/gcc"
                          '((:exec . ("%c -std=c++1z %o -o %e %s"
                                      "%e %a")))
                          :override t))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :config
    (setq enh-ruby-deep-indent-paren nil)
    (add-hook 'enh-ruby-mode #'turn-on-eldoc-mode))

  (use-package ruby-end
    :diminish "")

  (use-package yard-mode
    :defer t
    :diminish (yard-mode . "")
    :init
    (add-hook 'ruby-mode-hook #'yard-mode)
    (add-hook 'enh-ruby-mode-hook #'yard-mode))
#+END_SRC

*** Scala

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :init (add-hook 'scala-mode-hook #'ensime-mode)
    :commands ensime ensime-mode
    :config
    (setq ensime-completion-style 'auto-complete))
  (use-package scala-mode2
    :interpreter ("scala" . scala-mode)
    :config
    (setq scala-indent:use-javadoc-style t))
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+END_SRC

*** beacon

カーソルが大きく動いたときに

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :defer t
    :diminish ""
    :init (beacon-mode 1))
#+END_SRC

*** diminish

#+BEGIN_SRC emacs-lisp
  (diminish 'auto-revert-mode)
  (diminish 'abbrev-mode)
  (diminish 'auto-fill-function)
#+END_SRC

*** info+

#+BEGIN_SRC emacs-lisp
  (use-package info
    :defer t
    :config
    (use-package info+))
#+END_SRC

*** volatile-highlights

#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :diminish ""
    :config
    (volatile-highlights-mode t))
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish ""
    :init
    (setq undo-tree-history-directory-alist
        `((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode))
#+END_SRC

*** easy-kill

リージョンを指定せずに =M-w= したときの挙動を改善します。

以下の機能が使えるようになります:

1. =M-w w= :: 現在位置の単語をコピーします
2. =M-w s= :: 現在位置のS式をコピーします
3. =M-w l= :: 現在位置のリストをコピーします
4. =M-w d= :: 現在位置の関数定義全体をコピーします
5. =M-w D= :: 現在位置の関数名をコピーします
6. =M-w f= :: 現在位置のファイル名をコピーします
7. =M-w b= :: 現在のバッファのファイル名をコピーします。さらに =-= でディレクトリ名、 =+= でフルパス、 =0= でファイル名のみに変更します。

また、選択範囲を変更するには以下のキーを使います:

1. =@= :: 最後にコピーした内容に追加して終了します。例えば、 =M-w d @= で現在の関数名を最後にコピーした内容に追加します。
2. =C-w= :: 選択範囲をカットして終了します。
3. =+=, =-=, =1..9= :: 選択範囲を拡張/縮小します。
4. =0= 選択範囲を初期化します。
5. =C-SPC= :: 選択範囲をアクティブリージョンにします。
6. =C-g= :: 中止します。
7. =?= :: ヘルプを表示します。

#+BEGIN_SRC emacs-lisp
  (bind-keys ([remap kill-ring-save] . easy-kill)
             ([remap mark-sexp] . easy-mark))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish "")
#+END_SRC


*** 未整理

[[file:my-misc.org][雑多な設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-misc.org" user-emacs-directory))
#+END_SRC

** OS X
[[file:my-osx.org][OS X特有の設定]] をロードします:

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file (expand-file-name "my-osx.org" user-emacs-directory))
#+END_SRC

** 仕上げ

ユーザーのカスタム設定ファイルの場所を設定します:

#+BEGIN_SRC emacs-lisp
  (setq custom-file (f-expand "custom.el" my-personal-directory))
#+END_SRC

上記のファイルも含めた個人設定ファイルをロードします:

#+BEGIN_SRC emacs-lisp
  (mapc #'load (directory-files my-personal-directory 't "^[^#].*el\\'"))
#+END_SRC
