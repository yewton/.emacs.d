#+TITLE: org-capture
#+setupfile: ../setup.org

#+begin_src emacs-lisp :comments no :padline no
;;; toncs-config-org-capture.el -*- lexical-binding: t -*-
(require 'org-capture)
#+end_src

* テンプレ

** タスク

#+name: task
#+begin_src org
,* TODO %?
SCHEDULED: %t
:PROPERTIES:
:CATEGORY: task
:CREATED: %U
:END:
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-task-template
  `("t" "タスク" entry (file "")
    "\
<<task>>\
"
    :empty-lines 1
    :prepend t))
#+end_src

** ログ系

#+name: clock-in
#+begin_src org
,* %?
:PROPERTIES:
:CATEGORY: log
:CREATED: %U
:END:
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-clock-in-template
  `("i" "Clock-in" entry (file "")
    "\
<<clock-in>>\
"
    :clock-in t
    :clock-keep t
    :empty-lines 1
    :prepend t
    :jump-to-captured t))
#+end_src

#+name: log
#+begin_src org
,* %?
:PROPERTIES:
:CATEGORY: log
:CREATED: %U
:END:
%T
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-log-template
  `("l" "ログ" entry (file "")
    "\
<<log>>\
"
    :empty-lines 1
    :prepend t))
#+end_src

** イベント系

#+name: allday-event
#+begin_src org :tangle no
,* %^{イベント名}
:PROPERTIES:
:CATEGORY: event
:CREATED: %U
:END:
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-allday-event-template
  `("e" "終日イベント" entry (file "")
    "\
<<allday-event>>\
"
    :empty-lines 1
    :prepend t
    :immediate-finish t))
#+end_src

#+name: event
#+begin_src org
,* %^{イベント名}
:PROPERTIES:
:CATEGORY: event
:CREATED: %U
:END:
%^{時刻}T
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-event-template
  `("E" "イベント" entry (file "")
    "\
<<event>>\
"
    :empty-lines 1
    :prepend t
    :immediate-finish t))
#+end_src

#+name: holiday
#+begin_src org
,* %^{イベント名}
:PROPERTIES:
:CATEGORY: leave
:CREATED: %U
:END:
%^{日付}t
#+end_src

#+begin_src emacs-lisp
(defconst toncs-config-org-capture-leave-template
  `("L" "休暇" entry (file "")
    "\
<<holiday>>\
"
    :empty-lines 1
    :prepend t
    :immediate-finish t))
#+end_src

#+begin_src emacs-lisp
(defun toncs-config-org-capture-reset-templates ()
  (interactive)
  (setq org-capture-templates nil)
  (toncs-config-org-capture-setup-templates))

(defun toncs-config-org-capture-setup-templates ()
  (dolist (template (list toncs-config-org-capture-task-template
			  toncs-config-org-capture-clock-in-template
			  toncs-config-org-capture-log-template
			  toncs-config-org-capture-allday-event-template
			  toncs-config-org-capture-event-template))
    (add-to-list 'org-capture-templates template)))

(defun toncs-config-org-capture-configure ()
  (toncs-config-org-capture-setup-templates))
#+end_src

#+begin_src emacs-lisp :comments no
(provide 'toncs-config-org-capture)
;;; toncs-config-org-capture.el ends here
#+end_src
