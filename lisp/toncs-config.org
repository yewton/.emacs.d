#+TITLE: 設定
#+PROPERTY: header-args:emacs-lisp :tangle yes :comments both

#+begin_src emacs-lisp :comments no :padline no
;;; toncs-config.el -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
(require 'general)
(require 'no-littering)
#+end_src

* 設定記述用便利マクロ定義

#+begin_src emacs-lisp
(defvar toncs-config-configure-functions nil
  "`toncs-config-configure' によって定義される設定準備関数が登録されます。")

(defvar toncs-config-prepare-functions nil
  "`toncs-config-prepare' によって定義される設定準備関数が登録されます。")

(defmacro toncs-config-configure (theme &rest body)
  "THEME に沿った一連の設定内容を BODY に記述します。

設定された内容は toncs-config-THEME-configure という設定関数として定義され、
`toncs-config-configure-functions' に登録されます。
THEME はこの関数名に使用されるだけなので、何でもよいです。
自動でライブラリをロードしたりはしないので、必要な場合は別途 `require' 等を宣言して下さい。
この設定関数は `toncs-config-install' を呼び出すことで実行されます。"
  (declare (indent defun))
  (let* ((theme-string (symbol-name theme))
         (configure-func-symbol (intern (format "toncs-config-%s-configure" theme-string))))
    `(prog1
       (eval-and-compile
         (fset ',configure-func-symbol
               (lambda () ,@body)))
       (add-to-list 'toncs-config-configure-functions #',configure-func-symbol 'append))))

(defmacro toncs-config-prepare (feature &rest body)
  "FEATURE のロード後に設定を読み込むようにします。

toncs-config-FEATURE-configure という設定関数を toncs-config-FEATURE から読み込むように
autoload が設定されるので、設定処理はそこに記述します。

この設定関数を FEATURE のロード後に呼び出すような設定準備関数 toncs-config-FEATURE-prepare が定義され、
`toncs-config-prepare-functions' に登録されます。
この設定準備関数は `toncs-config-install' を呼び出すことで実行されます。

BODY は設定準備関数の実行時に評価されるので、
FEATURE の読み込み前に設定しておきたい変数の初期化処理やキーバインディングの設定等があればここに記述します。"
  (declare (indent defun))
  (let* ((feature-string (symbol-name feature))
         (configure-func-symbol (intern (format "toncs-config-%s-configure" feature-string)))
         (prepare-func-symbol (intern (format "toncs-config-%s-prepare" feature-string))))
    `(prog1
       (eval-and-compile
         (autoload ',configure-func-symbol ,(format "toncs-config-%s" feature-string))
         ;; https://emacs.stackexchange.com/questions/51981/making-a-dynamic-interactive-function#comment80184_51983
         (fset ',prepare-func-symbol
               (lambda ()
                 ,@body
                 (with-eval-after-load ,feature-string
                   (funcall #',configure-func-symbol)))))
       (add-to-list 'toncs-config-prepare-functions #',prepare-func-symbol 'append))))
#+end_src

* モードライン

#+begin_src emacs-lisp
(require 'time)

(toncs-config-configure modeline
  (setq display-time-format "%_m月%_d日(%a) %H:%M")
  (setq display-time-default-load-average nil)
  (column-number-mode 1)
  (display-time-mode 1)
  ;; トップレベルで (requrie 'moody) をしてしまうと CI でのバイトコンパイル時に
  ;; Error: Symbol’s function definition is void: font-info が出てしまう為、
  ;; `font-info' 及び依存変数・関数全ての束縛チェックをしている…。
  (when (and (fboundp 'font-info)
             (boundp 'x-underline-at-descent-line))
    (require 'moody)
    (when (and (fboundp 'moody-replace-mode-line-buffer-identification)
               (fboundp 'moody-replace-vc-mode)
               (fboundp 'moody-replace-eldoc-minibuffer-message-function)
               (boundp 'moody-slant-function))
      (setq x-underline-at-descent-line t)
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (moody-replace-eldoc-minibuffer-message-function)
      (when (eq system-type 'darwin)
        (setq moody-slant-function 'moody-slant-apple-rgb)))))
#+end_src

* Org mode

#+begin_src emacs-lisp
(toncs-config-prepare org)

(toncs-config-prepare org-agenda
  (general-def
    "C-c a" #'org-agenda))

(toncs-config-prepare org-capture
  (general-def
    "C-c c" #'org-capture))

(toncs-config-prepare org-attach)

(autoload 'toncs-org-roam-search "toncs-config-org-roam")
(toncs-config-prepare org-roam
  (defvar org-roam-v2-ack t)
  (general-def
    "C-c n f" #'org-roam-node-find
    "C-c n g" #'org-roam-graph
    "C-c n t" #'org-roam-dailies-goto-today
    "C-c n c" #'org-roam-capture
    "C-c n s" #'toncs-org-roam-search)
  (general-def org-mode-map
    "C-c n i" #'org-roam-node-insert))
#+end_src

* 外観
** フォント

#+begin_src emacs-lisp
(defun toncs-config-font-configure ()
  (let* ((fonts '(("HackgenNerd" . 130)
                  ("Cica" . 140)
                  ("Menlo" . 120)
                  ("Myrica M" . 120)
                  ("Monospace" . 96)))
         (font (seq-find (lambda (f) (find-font (font-spec :name (car f)))) fonts)))
    (when font
      (let ((font-family (car font))
            (font-height (cdr font)))
        (set-face-attribute 'default nil
                            :family font-family
                            :height font-height)
        (dolist (face '(variable-pitch fixed-pitch))
          (set-face-attribute face nil
                              :family font-family))
        (dolist (charset '(japanese-jisx0208 japanese-jisx0208 katakana-jisx0201))
          (when (fboundp 'set-fontset-font)
            (set-fontset-font (frame-parameter nil 'font)
                              charset
                              (font-spec :family font-family)))))))
  ;; see https://www.reddit.com/r/emacs/comments/ggd90c/color_emoji_in_emacs_27/
  (let* ((emoji-fonts '("Apple Color Emoji"
                        "Noto Color Emoji"
                        "Segoe UI Emoji"
                        "Symbola"))
         (emoji-font (seq-find (lambda (f) (find-font (font-spec :name f))) emoji-fonts)))
    (when emoji-font
      (set-fontset-font t 'symbol emoji-font))))
#+end_src
** modus-themes

#+begin_src emacs-lisp
(toncs-config-prepare modus-themes)
(require 'modus-themes)
#+end_src

** その他

#+begin_src emacs-lisp
;; https://github.com/syl20bnr/spacemacs/issues/10502#issuecomment-404453194
(defun toncs-set-bigger-spacing ()
  (setq-local default-text-properties '(line-spacing 0.25 line-height 1.25)))

(toncs-config-configure appearance
  (blink-cursor-mode 1)
  (menu-bar-mode 0)
  (setq echo-keystrokes 0.2)
  (setq use-dialog-box nil)
  (when window-system
    (toncs-config-font-configure)
    (when (fboundp 'tool-bar-mode) (tool-bar-mode 0))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
    (add-hook 'emacs-startup-hook #'toggle-frame-maximized))
  (dolist (hook '(prog-mode-hook text-mode-hook))
    (add-hook hook #'hl-line-mode)
    (add-hook hook #'toncs-set-bigger-spacing)))
#+end_src

* amx

#+begin_src emacs-lisp :tangle no
(require 'amx)

(toncs-config-configure amx
  (setq amx-history-length 9)
  ;; emacs -q の時に Warning が出まくってウルサイので鎮める
  (when noninteractive (setq amx-save-file nil))
  (amx-mode 1))
#+end_src

* winum

#+begin_src emacs-lisp
(require 'winum)

(toncs-config-configure winum
  (general-def winum-keymap
    "M-1" #'winum-select-window-1
    "M-2" #'winum-select-window-2
    "M-3" #'winum-select-window-3
    "M-4" #'winum-select-window-4
    "M-5" #'winum-select-window-5
    "M-6" #'winum-select-window-6
    "M-7" #'winum-select-window-7
    "M-8" #'winum-select-window-8
    "M-9" #'winum-select-window-9))
#+end_src

* avy

#+begin_src emacs-lisp
(require 'avy)

(toncs-config-configure avy
  (setq avy-style 'pre)
  (setq avy-all-windows nil)
  (general-def
    "C-;"  #'avy-goto-char-2
    "C-'" #'avy-goto-line
    "M-g g" #'avy-goto-line
    "M-g c" #'avy-goto-char
    "M-g e" #'avy-goto-word-0
    "M-g w" #'avy-goto-word-1
    "M-g P" #'avy-pop-mark))
#+end_src

* marginalia

#+begin_src emacs-lisp
(require 'marginalia)
(toncs-config-configure marginalia
  (general-def minibuffer-local-map
    "M-A" #'marginalia-cycle)
  (dolist (command-category '((projectile-find-file . project-file)
                      (projectile-find-dir . project-file)
                      (projectile-switch-project . file)
                      (consult-projectile . file)))
    (add-to-list 'marginalia-command-categories command-category))
  (marginalia-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

* embark

#+begin_src emacs-lisp
(require 'embark-consult)

(defun embark-magit-status (file)
  "Run `magit-status` on repo containing the embark target."
  (interactive "GFile: ")
  (magit-status (locate-dominating-file file ".git")))

(toncs-config-configure embark
  (setq embark-prompter 'embark-completing-read-prompter)
  (setq embark-indicators '(embark-minimal-indicator embark-highlight-indicator embark-isearch-highlight-indicator))
  (general-def
    "<help> b" #'embark-bindings
    "C-." #'embark-act
    "M-." #'embark-dwim)
  (general-def embark-file-map
    "v" #'embark-magit-status)
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

* vertico + orderless + consult

#+begin_src emacs-lisp
(require 'vertico)
(require 'vertico-buffer)
(require 'vertico-directory)
(require 'vertico-indexed)
(require 'vertico-multiform)
(require 'vertico-quick)
(require 'orderless)
(require 'consult)
(require 'consult-xref)
(require 'consult-imenu)

(defun toncs-open-junk-file (&optional arg)
  "Open junk file.

  When ARG is non-nil search in junk files."
  (interactive "P")
  (let* ((junk-root-dir (no-littering-expand-var-file-name "junk/"))
         (open-junk-file-format (expand-file-name "junk/%Y/%m/%d-%H%M%S." junk-root-dir ))
         (path (format-time-string open-junk-file-format (current-time)))
         (file-name (file-name-nondirectory path))
         (dir-name (file-name-directory path))
         (default-directory dir-name))
    (if arg
        (consult-ripgrep junk-root-dir)
      (mkdir dir-name 'parents)
      (find-file (read-file-name "[junk] " junk-root-dir nil nil file-name)))))

(defun consult--migemo-regexp-compiler (input type)
  "`consult--default-regexp-compiler' の migemo 対応版。"
  (setq input (mapcar #'migemo-get-pattern (consult--split-escaped input)))
  (cons (mapcar (lambda (x) (consult--convert-regexp x type)) input)
        (when-let (regexps (seq-filter #'consult--valid-regexp-p input))
          (lambda (str)
            (consult--highlight-regexps regexps str)))))

(toncs-config-configure vertico+orderless+consult
  (general-def vertico-map
    "C-v" #'vertico-scroll-up
    "M-v" #'vertico-scroll-down
    "C-'" #'vertico-quick-insert
    "C-q" #'vertico-quick-exit
    "C-j" #'vertico-directory-enter
    "DEL" #'vertico-directory-delete-char
    "M-d" #'vertico-directory-delete-word)

  (setq completion-styles '(substring initials orderless))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles partial-completion))))
  (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (setq enable-recursive-minibuffers t)

  (setq consult-project-root-function #'projectile-project-root)
  (setq consult--regexp-compiler #'consult--migemo-regexp-compiler)
  (setq consult-ripgrep-args "rg --null --line-buffered --color=never --max-columns=1000 --max-columns-preview --path-separator /   --smart-case --no-heading --line-number .")

  (setq orderless-component-separator #'orderless-escapable-split-on-space)

  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)

  (general-def isearch-mode-map
    "M-e" #'consult-isearch-history
    "M-s e" #'consult-isearch-history
    "M-s l" #'consult-line
    "M-s L" #'consult-line-multi)

  (general-def
    "C-c m" #'consult-mode-command
    "C-c k" #'consult-kmacro
    "C-x M-:" #'consult-complex-command
    "C-x b" #'consult-buffer
    "C-x C-r" #'consult-recent-file
    "C-x 4 b" #'consult-buffer-other-window
    "C-x 5 b" #'consult-buffer-other-frame
    "C-x r b" #'consult-bookmark
    "M-y" #'consult-yank-pop
    "<help> a" #'consult-apropos
    "M-g e" #'consult-compile-error
    "M-g f" #'consult-flymake
    "M-g g" #'consult-goto-line
    "M-g M-g" #'consult-goto-line
    "M-g o" #'consult-outline
    "M-g m" #'consult-mark
    "M-g k" #'consult-global-mark
    "M-g i" #'consult-imenu
    "M-g I" #'consult-imenu-multi
    "M-s d" #'consult-find
    "M-s D" #'consult-locate
    "M-s g" #'consult-grep
    "M-s G" #'consult-git-grep
    "M-s r" #'consult-ripgrep
    "M-s l" #'consult-line
    "M-s L" #'consult-line-multi
    "M-s m" #'consult-multi-occur
    "M-s k" #'consult-keep-lines
    "M-s u" #'consult-focus-lines
    "M-s e" #'consult-isearch-history
    "C-x z" #'toncs-open-junk-file
    "C-x C-z" #'toncs-open-junk-file)

  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
  (vertico-mode)
  (vertico-multiform-mode 1)
  (setq vertico-multiform-commands
        '((consult-imenu buffer indexed)
          (consult-ripgrep buffer)
          (consult-git-grep buffer)))
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-.")))
#+end_src

* crux

#+begin_src emacs-lisp
(toncs-config-configure crux
  (general-def
    [remap move-beginning-of-line] #'crux-move-beginning-of-line
    "C-c o" #'crux-open-with
    [(shift return)] #'crux-smart-open-line
    [remap kill-whole-line] #'crux-kill-whole-line))
#+end_src

* paren

#+begin_src emacs-lisp
(toncs-config-prepare paren)
#+end_src

* dired

#+begin_src emacs-lisp
(toncs-config-prepare dired)
#+end_src

* display-line-numbers

#+begin_src emacs-lisp
(toncs-config-prepare display-line-numbers
  (dolist (hook '(prog-mode-hook text-mode-hook))
    (add-hook hook #'display-line-numbers-mode)))
#+end_src

* skk

#+begin_src emacs-lisp
(toncs-config-prepare skk
  (general-def "C-x C-j" #'skk-mode))
#+end_src

* migemo

#+begin_src emacs-lisp
(require 'migemo)

(defun toncs-orderless-migemo (component)
  "Match COMPONENT as a migemo input."
  (let ((pattern (migemo-get-pattern component)))
    (condition-case nil
        (progn (string-match-p pattern "") pattern)
      (invalid-regexp nil))))

(defun toncs-avy-goto-migemo-timer (&optional arg)
  (interactive "P")
  (let ((avy-all-windows (if arg
                             (not avy-all-windows)
                           avy-all-windows)))
    (avy-with avy-goto-migemo-timer
              (setq avy--old-cands (avy--read-candidates #'migemo-get-pattern))
              (avy-process avy--old-cands))))

(toncs-config-configure migemo
  (let* ((dict-candidates (list "/usr/local/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict"
                                "/usr/share/cmigemo/utf-8/migemo-dict"
                                "/usr/local/share/migemo/utf-8/migemo-dict"
                                "/opt/homebrew/share/migemo/utf-8/migemo-dict"))
         (dict (seq-find #'file-readable-p dict-candidates)))
    (when dict
      (setq migemo-dictionary dict)))
  (setq migemo-user-dictionary (no-littering-expand-var-file-name "migemo-user-dict"))
  (setq migemo-regex-dictionary (no-littering-expand-var-file-name "migemo-regex-dict"))
  (setq migemo-options '("--quiet" "--nonewline" "--emacs"))

  (setq orderless-matching-styles '(toncs-orderless-migemo))

  (general-def
    "M-C-;" #'toncs-avy-goto-migemo-timer)

  (add-hook 'emacs-startup-hook #'migemo-init))
#+end_src

* magit

#+begin_src emacs-lisp
(toncs-config-prepare magit)
#+end_src

* smerge

#+begin_src emacs-lisp
(toncs-config-prepare smerge-mode)
#+end_src

* diff-hl

#+begin_src emacs-lisp
(autoload 'diff-hl-magit-pre-refresh "diff-hl")
(autoload 'diff-hl-magit-post-refresh "diff-hl")

(toncs-config-configure diff-hl
  (unless window-system
    (add-hook 'emacs-startup-hook #'diff-hl-margin-mode))
  (add-hook 'emacs-startup-hook #'global-diff-hl-mode)
  (add-hook 'dired-mode-hook #'diff-hl-dired-mode)
  (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))
#+end_src

* locale

#+begin_src emacs-lisp
(toncs-config-configure locale
  (set-language-environment 'Japanese)
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (setq system-time-locale "ja_JP.UTF-8"))
#+end_src

* Backspace

#+begin_src emacs-lisp
(toncs-config-configure backspace
  (general-def key-translation-map "C-h" (kbd "DEL"))
  (general-def "C-c h" #'help-command)
  (general-def "C-?" #'help-command))
#+end_src

* ウインドウ/バッファ関連

#+begin_src emacs-lisp
(require 'good-scroll)

(toncs-config-configure windows-and-buffers
  (setq window-combination-resize t)
  (setq scroll-preserve-screen-position t)
  (setq scroll-conservatively 1000)
  (general-def
    "<up>" #'good-scroll-down
    "<down>" #'good-scroll-up)
  (good-scroll-mode 1)
  (winum-mode 1))
#+end_src

** uniquify

#+begin_src emacs-lisp
(require 'uniquify)

(toncs-config-configure uniquify
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-min-dir-content 2))
#+end_src

** buffer-move

#+begin_src emacs-lisp
(toncs-config-configure buffer-move
  (general-def
    "C-S-j" #'buf-move-up
    "C-S-k" #'buf-move-down
    "C-S-l" #'buf-move-right
    "C-S-h" #'buf-move-left))
#+end_src

* which-key

#+begin_src emacs-lisp
(require 'which-key)

(toncs-config-configure which-key
  (which-key-mode 1)
  (delight 'which-key-mode nil "which-key"))
#+end_src

* サーバー

#+begin_src emacs-lisp
(require 'server)

(defun toncs-server-visit-hook-function ()
  "See https://stackoverflow.com/a/268205/2142831 ."
  (remove-hook 'kill-emacs-query-functions #'server-kill-emacs-query-function))

(toncs-config-configure server
  (add-hook 'server-visit-hook #'toncs-server-visit-hook-function)
  (unless (server-running-p) (server-start)))
#+end_src

* elisp-mode

#+begin_src emacs-lisp
(toncs-config-prepare elisp-mode)
#+end_src

* highlight-indent-guides

#+begin_src emacs-lisp
(toncs-config-prepare highlight-indent-guides
  (delight 'highlight-indent-guides-mode nil "highlight-indent-guides")
  ;; バッチ実行時に無意味なエラーが出ないようにする
  ;; https://github.com/DarthFennec/highlight-indent-guides/issues/83#issuecomment-635621246
  (when noninteractive (defvar highlight-indent-guides-suppress-auto-error t))
  (add-hook 'prog-mode-hook #'highlight-indent-guides-mode))
#+end_src

* whitespace

#+begin_src emacs-lisp
(require 'whitespace)

(defun toncs-setup-whitespace-face ()
  (set-face-underline 'whitespace-space "pink")
  (set-face-underline 'whitespace-trailing "pink"))

(toncs-config-configure whitespace
  (delight 'global-whitespace-mode nil "whitespace")
  (delight 'whitespace-mode nil "whitespace")
  (setq whitespace-style '(face tabs trailing spaces))
  ;; full-width space (\u3000, 　)
  (setq whitespace-space-regexp "\\(\u3000+\\)")
  (global-whitespace-mode 1)
  ;; `global-whitespace-mode' だけだと適用されないぽかった
  (add-hook 'prog-mode-hook #'whitespace-mode)
  (add-hook 'emacs-startup-hook #'toncs-setup-whitespace-face))
#+end_src

* auto-revert

#+begin_src emacs-lisp
(require 'autorevert)

(toncs-config-configure auto-revert
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  (setq auto-revert-mode-text nil)
  (global-auto-revert-mode 1))
#+end_src

* recentf

#+begin_src emacs-lisp
(require 'recentf)

(toncs-config-configure recentf
  (setq recentf-max-saved-items 100)
  (dolist (dir (list no-littering-var-directory
                     no-littering-etc-directory))
    (add-to-list 'recentf-exclude dir))
  (when noninteractive (setq recentf-auto-cleanup 'never))
  (recentf-mode 1)
  (run-with-idle-timer 300 t #'recentf-save-list))
#+end_src

* カレンダー

#+begin_src emacs-lisp
(toncs-config-prepare calendar)
#+end_src

* link-hint

#+begin_src emacs-lisp
(toncs-config-configure link-hint
  (general-def "M-o" #'link-hint-open-link)
  (general-def org-mode-map
    "M-o" #'link-hint-open-link)
  (general-def org-agenda-mode-map
    "o" #'link-hint-open-link))
#+end_src

* helpful

#+begin_src emacs-lisp
(toncs-config-configure helpful
  (general-def
    "C-c C-d" #'helpful-at-point
    "C-h f" #'helpful-callable
    "C-h v" #'helpful-variable
    "C-h k" #'helpful-key))
#+end_src

* rainbow

#+begin_src emacs-lisp
(toncs-config-configure rainbow
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'rainbow-identifiers-mode))
#+end_src

* highlight-thing

#+begin_src emacs-lisp
(defvar highlight-thing-exclude-thing-under-point)

(toncs-config-configure highlight-thing
  (delight 'highlight-thing-mode nil "highlight-thing")
  (add-hook 'emacs-startup-hook #'global-highlight-thing-mode)
  (with-eval-after-load "highlight-thing"
    (setq highlight-thing-exclude-thing-under-point t)))
#+end_src

* corfu

#+begin_src emacs-lisp
(require 'corfu)
(require 'corfu-doc)

(toncs-config-configure corfu
  (setq corfu-cycle t)
  (setq corfu-auto t)
  (setq corfu-commit-predicate nil)
  (setq corfu-quit-no-match t)
  (setq corfu-scroll-margin 5)
  (general-def
    "M-/" #'dabbrev-completion
    "C-M-/" #'dabbrev-expand)
  (general-def corfu-map
    "M-p" #'corfu-doc-scroll-down
    "M-n" #'corfu-doc-scroll-up)
  (corfu-global-mode 1)
  (add-hook 'corfu-mode-hook #'corfu-doc-mode))
#+end_src

* cape

#+begin_src emacs-lisp
(require 'cape)

(toncs-config-configure cape
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword))
#+end_src

* wgrep/rg

#+begin_src emacs-lisp
(require 'wgrep)

(toncs-config-configure wgrep
  (general-def grep-mode-map
    "r" #'wgrep-change-to-wgrep-mode))

(toncs-config-prepare rg)
#+end_src

* shackle

#+begin_src emacs-lisp
(require 'shackle)

(toncs-config-configure shackle
  (dolist (rule '((compilation-mode :select nil :align below :size 0.2)
                  (calendar-mode :select t :align below :popup t)
                  (org-roam-mode :select nil :align right :size 0.33 :popup t)
                  (helpful-mode :select t :align right :size 0.33 :popup t)))
    (add-to-list 'shackle-rules rule))
  (add-hook 'emacs-startup-hook #'shackle-mode))
#+end_src

* beacon

#+begin_src emacs-lisp
(require 'beacon)

(toncs-config-configure beacon
  (setq beacon-color "#9E3699")
  (delight 'beacon-mode nil "beacon")
  (add-hook 'emacs-startup-hook #'beacon-mode))
#+end_src

* treemacs

#+begin_src emacs-lisp
(eval-when-compile
  (defvar treemacs-no-load-time-warnings t))

(toncs-config-prepare treemacs
  (treemacs-icons-dired-mode)
  (general-def
    "M-0" #'treemacs-select-window
    "<f8>" #'treemacs
    "C-x t t" #'treemacs
    "C-x t B" #'treemacs-bookmark
    "C-x t C-t" #'treemacs-find-file
    "C-x t M-t" #'treemacs-find-tag))
#+end_src

* projectile

#+begin_src emacs-lisp
(require 'projectile)
(require 'consult-projectile)

;; 無害なはずなので...
(when noninteractive (defvar treemacs-no-load-time-warnings t))
(require 'treemacs-projectile)

(defun toncs-projectile-ignored-project-function (truename)
  (seq-find (lambda (dir) (file-in-directory-p truename dir))
            (list no-littering-var-directory
                  "/usr/local")))

(toncs-config-configure projectile
  (setq projectile-enable-caching t)
  (setq projectile-ignored-project-function #'toncs-projectile-ignored-project-function)
  (setq projectile-switch-project-action #'projectile-dired)
  (setq consult-projectile-sources '(consult-projectile--source-projectile-project consult-projectile--source-projectile-buffer consult-projectile--source-projectile-file))
  (delight 'projectile-mode nil "projectile")
  (projectile-mode 1)
  (general-def projectile-mode-map
    "C-c p" #'projectile-command-map)
  (general-def projectile-command-map
    "p" #'consult-projectile))
#+end_src

* 各言語の設定

** markdown

#+begin_src emacs-lisp
(toncs-config-prepare markdown-mode
  (dolist (elm '(("README\\.md\\'" . gfm-mode)
                 ("\\.md\\'" . markdown-mode)
                 ("\\.markdown\\'" . markdown-mode)))
    (add-to-list 'auto-mode-alist elm)))
#+end_src

** js

#+begin_src emacs-lisp
(toncs-config-prepare js)
#+end_src
* misc

#+begin_src emacs-lisp
(toncs-config-configure misc
  (setq enable-local-variables :safe)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq create-lockfiles nil)
  (setq set-mark-command-repeat-pop t)
  (transient-mark-mode 1)
  (setq save-abbrevs 'silently)
  (delight 'abbrev-mode nil "abbrev")

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default fill-column 80)
  (delight 'visual-line-mode nil "simple")

  (delight 'hi-lock-mode nil "hi-lock")

  (setq require-final-newline t)

  (setq kill-do-not-save-duplicates t)

  (setq help-window-select t)

  (dolist (fn #'(goto-address-prog-mode
                 bug-reference-prog-mode
                 show-paren-mode
                 electric-pair-mode
                 abbrev-mode))
    (add-hook 'prog-mode-hook fn))
  (dolist (fn #'(goto-address-mode
                 bug-reference-mode
                 show-paren-mode
                 electric-pair-mode
                 abbrev-mode))
    (add-hook 'text-mode-hook fn))

  ;; file
  (setq delete-by-moving-to-trash t)

  ;; clipboard
  (setq save-interprogram-paste-before-kill t)
  (when (eq window-system 'x)
    ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=23681
    (setq x-select-request-type 'UTF8_STRING)
    ;; 少なくとも Crostini 環境ではこうしないと Shit-Tab が動かなかった
    ;; 参考 https://emacs.stackexchange.com/a/53469
    (define-key function-key-map [(shift iso-lefttab)] [(shift tab)])
    (define-key function-key-map [(control shift iso-lefttab)] [(control shift tab)])
    (define-key function-key-map [(meta shift iso-lefttab)] [(meta shift tab)])
    (define-key function-key-map [(meta control shift iso-lefttab)] [(meta control shift tab)]))

  ;; eval
  (setq eval-expression-print-length nil)
  (setq eval-expression-print-level nil)

  ;; bells
  (setq ring-bell-function #'ignore)
  (setq visible-bell nil)

  ;; startup
  (setq inhibit-startup-screen t)
  (setq initial-major-mode 'fundamental-mode)

  ;; persistence
  (auto-save-visited-mode 1)
  (save-place-mode 1)
  (savehist-mode 1)

  ;; ox-hugo が conf-toml だとフロントマターだと認識してくれないので
  (fset 'toml-mode 'conf-toml-mode)

  (delight 'eldoc-mode nil "eldoc")

  ;; compilation
  (setq compilation-scroll-output 'first-error)

  (all-the-icons-completion-mode 1)

  (when toncs-wsl-p
    (when (executable-find "wslview")
      (setq browse-url-generic-program "wslview")
      (setq browse-url-browser-function #'browse-url-generic))))
#+end_src

* 設定の適用

#+begin_src emacs-lisp
(defun toncs-config-install ()
  (dolist (fn (append toncs-config-configure-functions toncs-config-prepare-functions))
    (funcall fn)))
#+end_src

#+begin_src emacs-lisp :comments no
(provide 'toncs-config)
;;; toncs-config.el ends here
#+end_src
