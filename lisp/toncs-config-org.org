#+TITLE: Org mode 読み込み後の初期設定
#+setupfile: ../setup.org

#+begin_src emacs-lisp :comments no :padline no
;;; toncs-config-org.el -*- lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
(require 'org)

(require 'org-checklist)
(require 'org-protocol)
(require 'org-id)

(require 'ob-shell)
(require 'ob-restclient)
(require 'ob-jq)

(require 'consult-org)

(require 'general)

(require 'toncs-stdlib)
#+end_src

* 便利定数・関数定義

#+begin_src emacs-lisp
(defconst toncs-org-agenda-directory (expand-file-name "agenda/" org-directory)
  "アジェンダに含めるディレクトリです。")

(defun toncs-org-babel-load-buffer-file ()
  "現在のファイルを対象に `org-babel-load-file' を実行し、コンパイルもします。"
  (interactive)
  (when buffer-file-name
    (org-babel-load-file buffer-file-name 'compile)))

(defun toncs-org-mode-hook-function ()
  (let ((file buffer-file-name))
    (when (and file (toncs-safe-file-in-directory-p file user-emacs-directory))
      (add-hook 'after-save-hook #'toncs-make-toncs nil t))))

(defun toncs-org-src-mode-hook-function ()
  (when (and (eq major-mode 'emacs-lisp-mode)
             (boundp 'flycheck-disabled-checkers))
    (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))))

(defun toncs-org-read-date-backward () (interactive) (org-eval-in-calendar '(calendar-backward-day 1)))
(defun toncs-org-read-date-next () (interactive) (org-eval-in-calendar '(calendar-forward-week 1)))
(defun toncs-org-read-date-previous () (interactive) (org-eval-in-calendar '(calendar-backward-week 1)))
(defun toncs-org-read-date-forward () (interactive) (org-eval-in-calendar '(calendar-forward-day 1)))
#+end_src

* org-duration

#+begin_src emacs-lisp
(eval-when-compile (require 'org-duration))
(defun toncs-config-org-duration-configure ()
  (with-eval-after-load "org-duration"
    (setq org-duration-format '((special . h:mm)))))
#+end_src

* org-refile

#+begin_src emacs-lisp
(eval-when-compile (require 'org-refile))
(defun toncs-config-org-refile-configure ()
  (with-eval-after-load "org-refile"
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-targets '((nil :maxlevel . 3) (org-agenda-files :maxlevel . 1)))))
#+end_src

* org-export

#+begin_src emacs-lisp
(eval-when-compile (require 'ox))
(defun toncs-config-ox-configure ()
  (with-eval-after-load "ox"
    (setq org-export-default-language "ja")))
#+end_src

* org-clock

#+begin_src emacs-lisp
(require 'org-clock)
(require 'org-mru-clock)

(defun toncs-org-show-notification-handler (title &optional msg)
  (cond
   ((and (eq window-system 'ns) (executable-find "terminal-notifier"))
    (call-process "terminal-notifier"
                  nil ; /dev/null
                  0 ; discard and don't wait for the program to terminate
                  nil ; do not display
                  "-title" title
                  "-message" (or msg "")
                  "-appIcon" "https://orgmode.org/img/org-mode-unicorn-logo.png"
                  "-activate" "org.gnu.Emacs"))
   ((eq window-system 'x)
    (if (executable-find "pwsh.exe")
        (call-process "pwsh.exe"
                      nil
                      0
                      nil
                      "-command" "New-BurntToastNotification"
                      ;; FIXME 文字列内にダブルクォートが入ったら壊れる…
                      "-Text" (format "\"%s\",\"%s\"" title msg))
      (eval-and-compile (require 'notifications))
      (notifications-notify :title title :body msg)))
   (t (message "%s %s" title msg))))

(defun toncs-config-org-clock-configure ()
  (setq org-clock-clocked-in-display 'both)
  (setq org-clock-persist t)
  (setq org-show-notification-handler #'toncs-org-show-notification-handler)
  (add-to-list 'org-clock-clocktable-language-setup
               '("ja" "ファイル" "レベル" "タイムスタンプ" "見出し" "工数" "全て" "合計" "ファイル計" "集計時刻"))
  (org-clock-persistence-insinuate)

  (general-def 'override
    "C-c C-x i" #'org-mru-clock-in
    "C-c C-x C-j" #'org-mru-clock-select-recent-task)
  (setq org-mru-clock-how-many 100)
  (add-hook 'minibuffer-setup-hook #'org-mru-clock-embark-minibuffer-hook))
#+end_src

* org-download

#+begin_src emacs-lisp
(require 'org-download)
(defun toncs-config-org-org-download-configure ()
  (setq org-download-method 'attach)
  ;; ox-hugo が attachment: link abbrev に対応していないため
  (setq org-download-link-format-function
        (lambda (filename)
          (format org-download-link-format
                  (org-link-escape
                   (funcall org-download-abbreviate-filename-function filename)))))
  (setq org-download-image-org-width 300)
  (setq org-download-annotate-function (lambda (&rest _) ""))
  ;; 参考 https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/
  (setq org-download-screenshot-method (pcase system-type
                                         ('darwin "pngpaste %s")
                                         ('gnu/linux
                                          (if toncs-wsl-p
                                              "powershell.exe '(Get-Clipboard -Format Image).Save(\"%s\")'"
                                              "xclip -selection clipboard -target image/png -o > %s")))))
#+end_src

* org-expiry

#+begin_src emacs-lisp
(autoload 'org-expiry-insinuate
  "org-expiry" "Add hooks and activate advices for org-expiry.
If ARG, also add a hook to `before-save-hook' in `org-mode' and
restart `org-mode' if necessary."
  'interactive)

(eval-when-compile (require 'org-expiry))
(defun toncs-config-org-expiry-configure ()
  (with-eval-after-load "org-expiry"
    (setq org-expiry-inactive-timestamps t)))
#+end_src

* org-appear

#+begin_src emacs-lisp
(require 'org-appear)

(defun toncs-config-org-appear ()
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

* その他の設定

#+begin_src emacs-lisp
(defun toncs-config-org-configure ()
  (setq org-catch-invisible-edits 'show-and-error)
  (setq org-cycle-separator-lines 0)
  (setq org-edit-src-content-indentation 0)
  (setq org-ellipsis "⤵")
  (setq org-fontify-done-headline t)
  (setq org-fontify-whole-heading-line t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars nil)
  (setq org-log-into-drawer t)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-pretty-entities t)
  (setq org-return-follows-link t)
  (setq org-reverse-note-order t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-folded 'content)
  (setq org-startup-indented nil)
  (setq org-startup-with-inline-images t)
  (setq org-use-speed-commands t)
  (setq org-use-sub-superscripts nil)
  (setq org-yank-adjusted-subtrees nil)
  (setq org-default-notes-file (expand-file-name "refileme.org" org-directory))
  (setq org-image-actual-width '(300))
  (setq org-display-remote-inline-images 'cache)
  (setq org-id-link-to-org-use-id 'create-if-interactive)
  ;; UUID の生成を外部コマンドに任せない
  (setq org-id-uuid-program "true")
  (setq org-adapt-indentation nil)
  (dolist (item (list toncs-org-agenda-directory org-default-notes-file))
    (add-to-list 'org-agenda-files item))

  (toncs-config-org-refile-configure)
  (toncs-config-ox-configure)
  (toncs-config-org-duration-configure)
  (toncs-config-org-clock-configure)
  (toncs-config-org-org-download-configure)
  (toncs-config-org-expiry-configure)
  (toncs-config-org-appear)

  (general-def
    "C-c l" #'org-store-link
    "C-c b" #'org-switchb)
  (general-def org-mode-map
    "C-'" #'avy-goto-line
    "<f5>" #'toncs-org-babel-load-buffer-file
    "C-c C-j" #'consult-org-heading
    ;; `org-cycle-agenda-files' は以下をやろうとして暴発した経験しかない為
    "C-," #'org-insert-structure-template)
  (general-def org-read-date-minibuffer-local-map
    "<left>" #'toncs-org-read-date-backward
    "<down>" #'toncs-org-read-date-next
    "<up>" #'toncs-org-read-date-previous
    "<right>" #'toncs-org-read-date-forward
    "b" #'toncs-org-read-date-backward
    "n" #'toncs-org-read-date-next
    "p" #'toncs-org-read-date-previous
    "f" #'toncs-org-read-date-forward)

  (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (org . t)
       (shell . t)
       (plantuml . t)
       (restclient .t)
       (jq . t)))
  (setq org-babel-min-lines-for-block-output 0)

  (delight '((org-indent-mode nil "org-indent")
             (org-src-mode nil "org-src")))
  (add-hook 'org-mode-hook #'toncs-org-mode-hook-function)
  (add-hook 'org-src-mode-hook #'toncs-org-src-mode-hook-function))
#+end_src

#+begin_src emacs-lisp :comments no
(provide 'toncs-config-org)
;;; toncs-config-org.el ends here
#+end_src
