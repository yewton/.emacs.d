設定に使用する定数を定義します:

#+BEGIN_SRC emacs-lisp
  (defconst my-personal-directory (expand-file-name "personal/" user-emacs-directory)
    "バージョン管理外の個人用設定ファイルを配置するためのディレクトリ.

  その他の設定が全て完了した時に読み込まれます.")
  (defconst my-personal-preload-directory (expand-file-name "preload/" my-personal-directory)
    "バージョン管理外の個人用設定ファイルを配置するためのディレクトリ.

  一番最初に読み込まれます.")
#+END_SRC

この他に ~my-data-directory~ という、バージョン管理外の様々なファイルを配置するためのディレクトリが
[[file:init.el][init.el]] で定義されています。

続いて、 ~my-personal-preload-directory~ 個人設定を読み込みます:

#+BEGIN_SRC emacs-lisp
  (mapc #'load (directory-files my-personal-preload-directory 't "^[^#].*el\\'"))
#+END_SRC

個人情報を設定します:

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Yuto SASAKI")
  (setq user-mail-address "yewton@gmail.com")
#+END_SRC

ロケール関係の環境変数を設定します。

これらは明示的に設定しない場合は環境変数から自動で設定されますが、
Mac OS X の Application として動かす場合はシェルの環境変数が引き継がれないため、すべて明示的に指定します:

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq locale-coding-system 'utf-8)
    (setq system-time-locale "ja_JP.UTF-8")
    (setenv "LANG" "ja_JP.UTF-8")
    (setenv "LC_ALL" "ja_JP.UTF-8")
    (setenv "LC_MESSAGES" "ja_JP.UTF-8"))
#+END_SRC

~el-get~ は大量の通信を行うため、結構な頻度で失敗します。
単にリトライすれば解決する場合も多いため、
失敗時に一定回数リトライするような関数を定義して使うことにします:

#+BEGIN_SRC emacs-lisp
  (require 'el-get)
  (defun my-el-get-sync (packages &optional num)
    "(el-get 'sync PACKAGES) 失敗時に NUM 回までリトライする"
    (let* ((num (or num 5))
           (trial (number-sequence 1 num)))
      (while trial
        (condition-case err-var
            (progn
              (el-get 'sync packages)
              (setq trial nil))
          (error
           (message "Trial %d: failed with: %s" (car trial) err-var)
           (setq trial (cdr trial))
           (if trial
               (sleep-for (car trial))
             (error "el-get failed with: %s" err-var)))))))
#+END_SRC

なお、el-get 自体のインストールは [[file:init.el][init.el]] で行っています。

続いて基本的なパッケージをインストール・設定しておきます:

#+BEGIN_SRC emacs-lisp
  (my-el-get-sync '(dash diminish f s use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (use-package f)
  (use-package dash
    :config
    (dash-enable-font-lock))
  (use-package s)
#+END_SRC

ディレクトリ関連の関数を定義します:

#+BEGIN_SRC emacs-lisp
  (defun my-directory! (name default-directory)
    "DEFAULT-DIRECTORY に NAME というディレクトリを作成し、その絶対パスを返します."
    (let ((path (file-name-as-directory (f-expand name default-directory))))
      (unless (file-directory-p path)
        (make-directory path t))
      path))

  (defun my-user-emacs-directory! (name)
    "`user-emacs-directory' に NAME というディレクトリを作成し、その絶対パスを返します."
    (my-directory! name user-emacs-directory))

  (defun my-data-directory! (name)
    "`my-data-directory' に NAME というディレクトリを作成し、その絶対パスを返します."
    (my-directory! name my-data-directory))

  (defun my-data-file (name)
    "`my-data-directory' 以下の NAME というファイル名の絶対パスを返します."
    (f-expand name my-data-directory))
#+END_SRC

一部のファイルやディレクトリの設定はパッケージのインストール前に設定しておかないと、
予期せぬディレクトリを作成してしまう場合があるため、ここで設定しておきます:

#+BEGIN_SRC emacs-lisp
  (setq url-configuration-directory (my-data-directory! "url")
        pcache-directory (my-data-directory! "pcache")
        ac-comphist-file (my-data-file "ac-comphist.dat"))
#+END_SRC
