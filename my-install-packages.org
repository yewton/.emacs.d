el-get でインストールするパッケージを定義します:

#+BEGIN_SRC emacs-lisp
  (setq my-packages
        '(
          ace-link
          ag
          anzu
          apache-mode
          auto-complete
          avy
          beacon
          bm
          bookmark+
          buffer-move
          color-theme-zenburn
          counsel-projectile
          crontab-mode
          ddskk
          diminish
          dired+
          dired-hacks
          dockerfile-mode
          easy-kill
          eldoc-eval
          elisp-slime-nav
          enh-ruby-mode
          ensime
          eyebrowse
          fancy-battery
          flycheck
          flycheck-pos-tip
          flyspell
          git-gutter
          git-gutter-fringe
          git-modes
          git-timemachine
          golden-ratio
          google-c-style
          htmlize
          hugo
          imenu-anywhere
          info+
          japanese-holidays
          js2-mode
          leuven-theme
          lispxmp
          magit
          magit-gh-pulls
          markdown-mode
          migemo
          multiple-cursors
          nginx-mode
          nlinum
          open-junk-file
          operate-on-number
          org-ac
          org-present
          org-reveal
          plantuml-mode
          projectile
          quickrun
          rainbow-delimiters
          rainbow-identifiers
          rainbow-mode
          ruby-block
          ruby-electric
          ruby-end
          ruby-mode
          sbt-mode
          scala-mode2
          smartrep
          spaceline
          swiper
          undo-tree
          volatile-highlights
          wakatime-mode
          web-mode
          wgrep
          which-key
          window-numbering
          yaml-mode
          yard-mode
          yasnippet
          ))
#+END_SRC

el-get の公式にないレシピや、一部自分用にカスタムしたものをここに列挙します:

#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package url-expand)
  (setq el-get-sources
        '((:name spaceline :type github :pkgname "TheBB/spaceline" :depends (powerline dash s))
          (:name persp-mode :type github :pkgname "Bad-ptr/persp-mode.el")
          (:name fancy-battery :type github :pkgname "lunaryorn/fancy-battery.el")
          (:name eyebrowse :type github :pkgname "wasamasa/eyebrowse")
          (:name org-reveal :depends nil)
          (:name powerline :pkgname "yewton/powerline" :branch "string-width")
          (:name hugo :type github :pkgname "yewton/hugo.el" :depends (dash f ht s))
          (:name easy-kill :type github :pkgname "leoliu/easy-kill")
          (:name markdown-mode :prepare nil) ; markdown-modeじゃなくgfm-modeで開きたいから
          (:name ensime :prepare nil) ; auto-load の定義が間違ってる気がする
          (:name ddskk :pkgname "skk-dev/ddskk" :autoloads nil :load-path "share/emacs/site-lisp/skk"
                 :info "share/info/skk.info" :features ("skk-setup")
                 :build
                 <<ddskk-build>>
                 )
          (:name open-junk-file
                 :features nil
                 :before (autoload 'open-junk-file "open-junk-file" "" t))
          (:name nlinum :type emacsmirror)))
#+END_SRC

DDSKK のビルドについては、実際の ~Makefile~ を出来るだけ忠実に再現出来るようにかなり頑張っています:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref ddskk-build
  (let* ((prefix (el-get-package-directory "ddskk"))
         (dic-dir (expand-file-name "dic/" prefix))
         (tools-dir (expand-file-name "tools/" prefix))
         (info-dir (expand-file-name "share/info/" prefix))
         (base-url "http://openlab.ring.gr.jp/skk/skk/")
         (dic-base-url (url-expand-file-name "dic/" base-url))
         (tools-base-url (url-expand-file-name "tools/" base-url))
         (dic-name "SKK-JISYO.L")
         (dic-url (url-expand-file-name dic-name dic-base-url))
         (dic-path (expand-file-name dic-name dic-dir))
         (dic-makefile-url (url-expand-file-name "Makefile" dic-base-url))
         (dic-makefile-path (expand-file-name "Makefile" dic-dir))
         (skk2cdb "skk2cdb.py")
         (skk2cdb-url (url-expand-file-name skk2cdb tools-base-url))
         (skk2cdb-path (expand-file-name skk2cdb tools-dir))
         (emacs-options '("--batch" "--no-site-file" "--eval")))
    `(,@(mapcar (lambda (cmd) `(,el-get-emacs ,@emacs-options ,cmd))
                `(,@(mapcar (lambda (dir) (format "(make-directory \"%s\" t)" dir))
                            (list dic-dir info-dir tools-dir))
                  ,@(mapcar (lambda (p) (format "(url-copy-file \"%s\" \"%s\")" (car p) (cdr p)))
                            (list `(,dic-url . ,dic-path)
                                  `(,dic-makefile-url . ,dic-makefile-path)
                                  `(,skk2cdb-url . ,skk2cdb-path)))))
      (,el-get-emacs ,@emacs-options
                     ,(format "(setq PREFIX \"%s\")" prefix)
                     "-l" "SKK-MK" "-f" "SKK-MK-install")
      ("make" "-C" ,dic-dir "cdb")))
#+END_SRC

MELPA 等で配布されているパッケージをそのまま el-get から利用することもあるので、
標準のパッケージシステムも設定しておきます:

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")
                           ("ELPA" . "http://tromey.com/elpa/")))
  (package-initialize)
#+END_SRC

Mac OS X の場合、ビルド時に正しいパスが設定されていないと失敗する場合があるため、
exec-path-from-shell でパスの設定を行ないます:

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (my-el-get-sync '(exec-path-from-shell))
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-initialize)))
#+END_SRC

その他のパッケージをインストールします:

#+BEGIN_SRC emacs-lisp
  (my-el-get-sync my-packages)
#+END_SRC
